
traffic_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f4c  08007f4c  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007f4c  08007f4c  00008f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f54  08007f54  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f54  08007f54  00008f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f58  08007f58  00008f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007f5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c98  20000088  08007fe4  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d20  08007fe4  00009d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba74  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd9  00000000  00000000  00024b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a4  00000000  00000000  0002a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b9c  00000000  00000000  0002b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7e8  00000000  00000000  00044cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098dca  00000000  00000000  000614e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  000fa2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ffec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007dac 	.word	0x08007dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08007dac 	.word	0x08007dac

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinaryTraffic */
  myBinaryTrafficHandle = osSemaphoreNew(1, 1, &myBinaryTraffic_attributes);
 80004d4:	4a20      	ldr	r2, [pc, #128]	@ (8000558 <MX_FREERTOS_Init+0x88>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	2001      	movs	r0, #1
 80004da:	f004 f904 	bl	80046e6 <osSemaphoreNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a1e      	ldr	r2, [pc, #120]	@ (800055c <MX_FREERTOS_Init+0x8c>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of segmentSem02 */
  segmentSem02Handle = osSemaphoreNew(1, 1, &segmentSem02_attributes);
 80004e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <MX_FREERTOS_Init+0x90>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f004 f8fc 	bl	80046e6 <osSemaphoreNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <MX_FREERTOS_Init+0x94>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueuereceive */
  myQueuereceiveHandle = osMessageQueueNew (10, sizeof(uint8_t), &myQueuereceive_attributes);
 80004f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000568 <MX_FREERTOS_Init+0x98>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	200a      	movs	r0, #10
 80004fa:	f004 fa13 	bl	8004924 <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a1a      	ldr	r2, [pc, #104]	@ (800056c <MX_FREERTOS_Init+0x9c>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a1a      	ldr	r2, [pc, #104]	@ (8000570 <MX_FREERTOS_Init+0xa0>)
 8000506:	2100      	movs	r1, #0
 8000508:	481a      	ldr	r0, [pc, #104]	@ (8000574 <MX_FREERTOS_Init+0xa4>)
 800050a:	f004 f83f 	bl	800458c <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a19      	ldr	r2, [pc, #100]	@ (8000578 <MX_FREERTOS_Init+0xa8>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(traffic_light, NULL, &myTask02_attributes);
 8000514:	4a19      	ldr	r2, [pc, #100]	@ (800057c <MX_FREERTOS_Init+0xac>)
 8000516:	2100      	movs	r1, #0
 8000518:	4819      	ldr	r0, [pc, #100]	@ (8000580 <MX_FREERTOS_Init+0xb0>)
 800051a:	f004 f837 	bl	800458c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a18      	ldr	r2, [pc, #96]	@ (8000584 <MX_FREERTOS_Init+0xb4>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(servo_control, NULL, &myTask03_attributes);
 8000524:	4a18      	ldr	r2, [pc, #96]	@ (8000588 <MX_FREERTOS_Init+0xb8>)
 8000526:	2100      	movs	r1, #0
 8000528:	4818      	ldr	r0, [pc, #96]	@ (800058c <MX_FREERTOS_Init+0xbc>)
 800052a:	f004 f82f 	bl	800458c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <MX_FREERTOS_Init+0xc0>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTrans, NULL, &myTask04_attributes);
 8000534:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <MX_FREERTOS_Init+0xc4>)
 8000536:	2100      	movs	r1, #0
 8000538:	4817      	ldr	r0, [pc, #92]	@ (8000598 <MX_FREERTOS_Init+0xc8>)
 800053a:	f004 f827 	bl	800458c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a16      	ldr	r2, [pc, #88]	@ (800059c <MX_FREERTOS_Init+0xcc>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(display, NULL, &myTask05_attributes);
 8000544:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <MX_FREERTOS_Init+0xd0>)
 8000546:	2100      	movs	r1, #0
 8000548:	4816      	ldr	r0, [pc, #88]	@ (80005a4 <MX_FREERTOS_Init+0xd4>)
 800054a:	f004 f81f 	bl	800458c <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <MX_FREERTOS_Init+0xd8>)
 8000552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	08007f14 	.word	0x08007f14
 800055c:	200000c0 	.word	0x200000c0
 8000560:	08007f24 	.word	0x08007f24
 8000564:	200000c4 	.word	0x200000c4
 8000568:	08007efc 	.word	0x08007efc
 800056c:	200000bc 	.word	0x200000bc
 8000570:	08007e48 	.word	0x08007e48
 8000574:	080005ad 	.word	0x080005ad
 8000578:	200000a8 	.word	0x200000a8
 800057c:	08007e6c 	.word	0x08007e6c
 8000580:	080007c5 	.word	0x080007c5
 8000584:	200000ac 	.word	0x200000ac
 8000588:	08007e90 	.word	0x08007e90
 800058c:	08000825 	.word	0x08000825
 8000590:	200000b0 	.word	0x200000b0
 8000594:	08007eb4 	.word	0x08007eb4
 8000598:	0800090d 	.word	0x0800090d
 800059c:	200000b4 	.word	0x200000b4
 80005a0:	08007ed8 	.word	0x08007ed8
 80005a4:	0800091d 	.word	0x0800091d
 80005a8:	200000b8 	.word	0x200000b8

080005ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  traffic_1_counter++;
 80005b4:	4b7a      	ldr	r3, [pc, #488]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b78      	ldr	r3, [pc, #480]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80005be:	701a      	strb	r2, [r3, #0]
	  segment_counter++;
 80005c0:	4b78      	ldr	r3, [pc, #480]	@ (80007a4 <StartDefaultTask+0x1f8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b76      	ldr	r3, [pc, #472]	@ (80007a4 <StartDefaultTask+0x1f8>)
 80005ca:	701a      	strb	r2, [r3, #0]
	  		if(traffic_1_counter <= 20){
 80005cc:	4b74      	ldr	r3, [pc, #464]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b14      	cmp	r3, #20
 80005d2:	d83e      	bhi.n	8000652 <StartDefaultTask+0xa6>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_green_Pin,  GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4873      	ldr	r0, [pc, #460]	@ (80007a8 <StartDefaultTask+0x1fc>)
 80005da:	f001 f989 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_yellow_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2102      	movs	r1, #2
 80005e2:	4871      	ldr	r0, [pc, #452]	@ (80007a8 <StartDefaultTask+0x1fc>)
 80005e4:	f001 f984 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_red_Pin,    GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2104      	movs	r1, #4
 80005ec:	486e      	ldr	r0, [pc, #440]	@ (80007a8 <StartDefaultTask+0x1fc>)
 80005ee:	f001 f97f 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_green_Pin,  GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	486c      	ldr	r0, [pc, #432]	@ (80007a8 <StartDefaultTask+0x1fc>)
 80005f8:	f001 f97a 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_yellow_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	4869      	ldr	r0, [pc, #420]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000602:	f001 f975 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_red_Pin,    GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2120      	movs	r1, #32
 800060a:	4867      	ldr	r0, [pc, #412]	@ (80007a8 <StartDefaultTask+0x1fc>)
 800060c:	f001 f970 	bl	80018f0 <HAL_GPIO_WritePin>
	  			osSemaphoreAcquire(myBinaryTrafficHandle, 100);
 8000610:	4b66      	ldr	r3, [pc, #408]	@ (80007ac <StartDefaultTask+0x200>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2164      	movs	r1, #100	@ 0x64
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f8ee 	bl	80047f8 <osSemaphoreAcquire>
	  			traffic_send = 'Z';
 800061c:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <StartDefaultTask+0x204>)
 800061e:	225a      	movs	r2, #90	@ 0x5a
 8000620:	701a      	strb	r2, [r3, #0]
	  			if(traffic_1_counter == 20){
 8000622:	4b5f      	ldr	r3, [pc, #380]	@ (80007a0 <StartDefaultTask+0x1f4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b14      	cmp	r3, #20
 8000628:	d10d      	bne.n	8000646 <StartDefaultTask+0x9a>
	  				osSemaphoreAcquire(segmentSem02Handle, 100);
 800062a:	4b62      	ldr	r3, [pc, #392]	@ (80007b4 <StartDefaultTask+0x208>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2164      	movs	r1, #100	@ 0x64
 8000630:	4618      	mov	r0, r3
 8000632:	f004 f8e1 	bl	80047f8 <osSemaphoreAcquire>
	  				segment_counter =0 ;
 8000636:	4b5b      	ldr	r3, [pc, #364]	@ (80007a4 <StartDefaultTask+0x1f8>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	  				osSemaphoreRelease(segmentSem02Handle);
 800063c:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <StartDefaultTask+0x208>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f92b 	bl	800489c <osSemaphoreRelease>
	  			}
	  			osSemaphoreRelease(myBinaryTrafficHandle);
 8000646:	4b59      	ldr	r3, [pc, #356]	@ (80007ac <StartDefaultTask+0x200>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f004 f926 	bl	800489c <osSemaphoreRelease>
 8000650:	e08f      	b.n	8000772 <StartDefaultTask+0x1c6>
	  		}else if((traffic_1_counter > 20) && (traffic_1_counter <= 80)){
 8000652:	4b53      	ldr	r3, [pc, #332]	@ (80007a0 <StartDefaultTask+0x1f4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b14      	cmp	r3, #20
 8000658:	d942      	bls.n	80006e0 <StartDefaultTask+0x134>
 800065a:	4b51      	ldr	r3, [pc, #324]	@ (80007a0 <StartDefaultTask+0x1f4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b50      	cmp	r3, #80	@ 0x50
 8000660:	d83e      	bhi.n	80006e0 <StartDefaultTask+0x134>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_green_Pin,  GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2101      	movs	r1, #1
 8000666:	4850      	ldr	r0, [pc, #320]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000668:	f001 f942 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_yellow_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	484d      	ldr	r0, [pc, #308]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000672:	f001 f93d 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_red_Pin,    GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	484b      	ldr	r0, [pc, #300]	@ (80007a8 <StartDefaultTask+0x1fc>)
 800067c:	f001 f938 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_green_Pin,  GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2108      	movs	r1, #8
 8000684:	4848      	ldr	r0, [pc, #288]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000686:	f001 f933 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_yellow_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2110      	movs	r1, #16
 800068e:	4846      	ldr	r0, [pc, #280]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000690:	f001 f92e 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_red_Pin,    GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2120      	movs	r1, #32
 8000698:	4843      	ldr	r0, [pc, #268]	@ (80007a8 <StartDefaultTask+0x1fc>)
 800069a:	f001 f929 	bl	80018f0 <HAL_GPIO_WritePin>
	  			osSemaphoreAcquire(myBinaryTrafficHandle, 100);
 800069e:	4b43      	ldr	r3, [pc, #268]	@ (80007ac <StartDefaultTask+0x200>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2164      	movs	r1, #100	@ 0x64
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f8a7 	bl	80047f8 <osSemaphoreAcquire>
	  			traffic_send = 'X';
 80006aa:	4b41      	ldr	r3, [pc, #260]	@ (80007b0 <StartDefaultTask+0x204>)
 80006ac:	2258      	movs	r2, #88	@ 0x58
 80006ae:	701a      	strb	r2, [r3, #0]
	  			if(traffic_1_counter == 0){
 80006b0:	4b3b      	ldr	r3, [pc, #236]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10d      	bne.n	80006d4 <StartDefaultTask+0x128>
	  				osSemaphoreAcquire(segmentSem02Handle, 100);
 80006b8:	4b3e      	ldr	r3, [pc, #248]	@ (80007b4 <StartDefaultTask+0x208>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2164      	movs	r1, #100	@ 0x64
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f89a 	bl	80047f8 <osSemaphoreAcquire>
	  				segment_counter =0 ;
 80006c4:	4b37      	ldr	r3, [pc, #220]	@ (80007a4 <StartDefaultTask+0x1f8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	  				osSemaphoreRelease(segmentSem02Handle);
 80006ca:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <StartDefaultTask+0x208>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f8e4 	bl	800489c <osSemaphoreRelease>
	  			}
	  			osSemaphoreRelease(myBinaryTrafficHandle);
 80006d4:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <StartDefaultTask+0x200>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 f8df 	bl	800489c <osSemaphoreRelease>
 80006de:	e048      	b.n	8000772 <StartDefaultTask+0x1c6>
	  		}else if((traffic_1_counter > 80) && (traffic_1_counter <= 85)){
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b50      	cmp	r3, #80	@ 0x50
 80006e6:	d944      	bls.n	8000772 <StartDefaultTask+0x1c6>
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <StartDefaultTask+0x1f4>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b55      	cmp	r3, #85	@ 0x55
 80006ee:	d840      	bhi.n	8000772 <StartDefaultTask+0x1c6>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_green_Pin,  GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	482c      	ldr	r0, [pc, #176]	@ (80007a8 <StartDefaultTask+0x1fc>)
 80006f6:	f001 f8fb 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_yellow_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	482a      	ldr	r0, [pc, #168]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000700:	f001 f8f6 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic1_red_Pin,    GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	4827      	ldr	r0, [pc, #156]	@ (80007a8 <StartDefaultTask+0x1fc>)
 800070a:	f001 f8f1 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_green_Pin,  GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	4825      	ldr	r0, [pc, #148]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000714:	f001 f8ec 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_yellow_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4822      	ldr	r0, [pc, #136]	@ (80007a8 <StartDefaultTask+0x1fc>)
 800071e:	f001 f8e7 	bl	80018f0 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, traffic3_red_Pin,    GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4820      	ldr	r0, [pc, #128]	@ (80007a8 <StartDefaultTask+0x1fc>)
 8000728:	f001 f8e2 	bl	80018f0 <HAL_GPIO_WritePin>
	  			osSemaphoreAcquire(myBinaryTrafficHandle, 100);
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <StartDefaultTask+0x200>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2164      	movs	r1, #100	@ 0x64
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f860 	bl	80047f8 <osSemaphoreAcquire>
	  			traffic_send = 'Y';
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <StartDefaultTask+0x204>)
 800073a:	2259      	movs	r2, #89	@ 0x59
 800073c:	701a      	strb	r2, [r3, #0]
	  			if(traffic_1_counter == 85) {
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <StartDefaultTask+0x1f4>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b55      	cmp	r3, #85	@ 0x55
 8000744:	d110      	bne.n	8000768 <StartDefaultTask+0x1bc>
	  				traffic_1_counter = 0;
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <StartDefaultTask+0x1f4>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
	  				osSemaphoreAcquire(segmentSem02Handle, 100);
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <StartDefaultTask+0x208>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2164      	movs	r1, #100	@ 0x64
 8000752:	4618      	mov	r0, r3
 8000754:	f004 f850 	bl	80047f8 <osSemaphoreAcquire>
	  				segment_counter =0 ;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <StartDefaultTask+0x1f8>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	  				osSemaphoreRelease(segmentSem02Handle);
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <StartDefaultTask+0x208>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f004 f89a 	bl	800489c <osSemaphoreRelease>
	  			}
	  			osSemaphoreRelease(myBinaryTrafficHandle);
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <StartDefaultTask+0x200>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f895 	bl	800489c <osSemaphoreRelease>
	  		}
	  	  if(previous_state != data2){
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <StartDefaultTask+0x20c>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <StartDefaultTask+0x210>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d00a      	beq.n	8000794 <StartDefaultTask+0x1e8>
	  		  previous_state = data2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <StartDefaultTask+0x210>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <StartDefaultTask+0x20c>)
 8000784:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart1, &data2, 1, HAL_MAX_DELAY);
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2201      	movs	r2, #1
 800078c:	490b      	ldr	r1, [pc, #44]	@ (80007bc <StartDefaultTask+0x210>)
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <StartDefaultTask+0x214>)
 8000790:	f002 fdac 	bl	80032ec <HAL_UART_Transmit>
	  	  }
    osDelay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f003 ff8a 	bl	80046b0 <osDelay>
	  traffic_1_counter++;
 800079c:	e70a      	b.n	80005b4 <StartDefaultTask+0x8>
 800079e:	bf00      	nop
 80007a0:	200000ca 	.word	0x200000ca
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	40020400 	.word	0x40020400
 80007ac:	200000c0 	.word	0x200000c0
 80007b0:	200000cc 	.word	0x200000cc
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	200000ce 	.word	0x200000ce
 80007bc:	200000cd 	.word	0x200000cd
 80007c0:	20000164 	.word	0x20000164

080007c4 <traffic_light>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_traffic_light */
void traffic_light(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN traffic_light */
  /* Infinite loop */
  for(;;)
  {
	      ir_sensor_1 = HAL_GPIO_ReadPin(GPIOA, ir_1_Pin);
 80007cc:	2110      	movs	r1, #16
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <traffic_light+0x50>)
 80007d0:	f001 f876 	bl	80018c0 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <traffic_light+0x54>)
 80007da:	701a      	strb	r2, [r3, #0]
	  	  ir_sensor_2 = HAL_GPIO_ReadPin(GPIOA, ir_2_Pin);
 80007dc:	2120      	movs	r1, #32
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <traffic_light+0x50>)
 80007e0:	f001 f86e 	bl	80018c0 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <traffic_light+0x58>)
 80007ea:	701a      	strb	r2, [r3, #0]

	  	  if((ir_sensor_1 == GPIO_PIN_RESET) || (ir_sensor_2 == GPIO_PIN_RESET)){
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <traffic_light+0x54>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <traffic_light+0x38>
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <traffic_light+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <traffic_light+0x40>
	  		  servo_Motor_Start_angle_90(&servo);
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <traffic_light+0x5c>)
 80007fe:	f003 fda3 	bl	8004348 <servo_Motor_Start_angle_90>
 8000802:	e002      	b.n	800080a <traffic_light+0x46>
	  	  }else{
	  		  servo_Motor_Start_angle_N90(&servo);
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <traffic_light+0x5c>)
 8000806:	f003 fde9 	bl	80043dc <servo_Motor_Start_angle_N90>
	  	  }
    osDelay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f003 ff50 	bl	80046b0 <osDelay>
	      ir_sensor_1 = HAL_GPIO_ReadPin(GPIOA, ir_1_Pin);
 8000810:	e7dc      	b.n	80007cc <traffic_light+0x8>
 8000812:	bf00      	nop
 8000814:	40020000 	.word	0x40020000
 8000818:	200000c8 	.word	0x200000c8
 800081c:	200000c9 	.word	0x200000c9
 8000820:	2000002c 	.word	0x2000002c

08000824 <servo_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_control */
void servo_control(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_control */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(myQueuereceiveHandle,&data,100);
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <servo_control+0xbc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2264      	movs	r2, #100	@ 0x64
 8000832:	492c      	ldr	r1, [pc, #176]	@ (80008e4 <servo_control+0xc0>)
 8000834:	4618      	mov	r0, r3
 8000836:	f005 f9f5 	bl	8005c24 <xQueueReceive>
	  //data = reciever;
	  if (osSemaphoreAcquire(myBinaryTrafficHandle, 100) == osOK) {
 800083a:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <servo_control+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2164      	movs	r1, #100	@ 0x64
 8000840:	4618      	mov	r0, r3
 8000842:	f003 ffd9 	bl	80047f8 <osSemaphoreAcquire>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d144      	bne.n	80008d6 <servo_control+0xb2>
	  data2 = traffic_send;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <servo_control+0xc8>)
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <servo_control+0xcc>)
 8000852:	701a      	strb	r2, [r3, #0]
	  if ((traffic_send == 'Z') && (flag == 0)) {
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <servo_control+0xc8>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b5a      	cmp	r3, #90	@ 0x5a
 800085a:	d10e      	bne.n	800087a <servo_control+0x56>
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <servo_control+0xd0>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10a      	bne.n	800087a <servo_control+0x56>
	      HAL_UART_Transmit(&huart2, &stop_data, 1, HAL_MAX_DELAY);
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	2201      	movs	r2, #1
 800086a:	4923      	ldr	r1, [pc, #140]	@ (80008f8 <servo_control+0xd4>)
 800086c:	4823      	ldr	r0, [pc, #140]	@ (80008fc <servo_control+0xd8>)
 800086e:	f002 fd3d 	bl	80032ec <HAL_UART_Transmit>
	      flag = 1;  // Set flag to avoid repeated transmissions
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <servo_control+0xd0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e017      	b.n	80008aa <servo_control+0x86>
	  } else if (traffic_send != 'Z') {
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <servo_control+0xc8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000880:	d013      	beq.n	80008aa <servo_control+0x86>
	      if (previous_state_urduino != data) {
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <servo_control+0xdc>)
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <servo_control+0xc0>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d00a      	beq.n	80008a4 <servo_control+0x80>
	          previous_state_urduino = data;
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <servo_control+0xc0>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <servo_control+0xdc>)
 8000894:	701a      	strb	r2, [r3, #0]
	          HAL_UART_Transmit(&huart2, &data, 1, HAL_MAX_DELAY);
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4911      	ldr	r1, [pc, #68]	@ (80008e4 <servo_control+0xc0>)
 800089e:	4817      	ldr	r0, [pc, #92]	@ (80008fc <servo_control+0xd8>)
 80008a0:	f002 fd24 	bl	80032ec <HAL_UART_Transmit>
	      }
	      flag = 0;  // Reset flag when traffic is not 'Z'
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <servo_control+0xd0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	  }
	  if(previous_state != data2){
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <servo_control+0xe0>)
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <servo_control+0xcc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d00a      	beq.n	80008cc <servo_control+0xa8>
	  		  previous_state = data2;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <servo_control+0xcc>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <servo_control+0xe0>)
 80008bc:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart1, &data2, 1, HAL_MAX_DELAY);
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	2201      	movs	r2, #1
 80008c4:	490a      	ldr	r1, [pc, #40]	@ (80008f0 <servo_control+0xcc>)
 80008c6:	4810      	ldr	r0, [pc, #64]	@ (8000908 <servo_control+0xe4>)
 80008c8:	f002 fd10 	bl	80032ec <HAL_UART_Transmit>
	  	  }
	    osSemaphoreRelease(myBinaryTrafficHandle);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <servo_control+0xc4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 ffe3 	bl	800489c <osSemaphoreRelease>
	}
    osDelay(50);
 80008d6:	2032      	movs	r0, #50	@ 0x32
 80008d8:	f003 feea 	bl	80046b0 <osDelay>
	  xQueueReceive(myQueuereceiveHandle,&data,100);
 80008dc:	e7a6      	b.n	800082c <servo_control+0x8>
 80008de:	bf00      	nop
 80008e0:	200000bc 	.word	0x200000bc
 80008e4:	20000000 	.word	0x20000000
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	200000cc 	.word	0x200000cc
 80008f0:	200000cd 	.word	0x200000cd
 80008f4:	200000d0 	.word	0x200000d0
 80008f8:	20000001 	.word	0x20000001
 80008fc:	200001ac 	.word	0x200001ac
 8000900:	200000cf 	.word	0x200000cf
 8000904:	200000ce 	.word	0x200000ce
 8000908:	20000164 	.word	0x20000164

0800090c <StartTrans>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrans */
void StartTrans(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrans */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f003 fecb 	bl	80046b0 <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartTrans+0x8>

0800091c <display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display */
void display(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN display */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092a:	4827      	ldr	r0, [pc, #156]	@ (80009c8 <display+0xac>)
 800092c:	f000 ffe0 	bl	80018f0 <HAL_GPIO_WritePin>
	  osSemaphoreAcquire(segmentSem02Handle, 100);
 8000930:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <display+0xb0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2164      	movs	r1, #100	@ 0x64
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ff5e 	bl	80047f8 <osSemaphoreAcquire>
	  segment_wright_logic(&segment,segment_counter/10);
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <display+0xb4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4a24      	ldr	r2, [pc, #144]	@ (80009d4 <display+0xb8>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <display+0xbc>)
 800094e:	f003 fcd3 	bl	80042f8 <segment_wright_logic>
	  osSemaphoreRelease(segmentSem02Handle);
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <display+0xb0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f003 ffa0 	bl	800489c <osSemaphoreRelease>
	  osDelay(10);
 800095c:	200a      	movs	r0, #10
 800095e:	f003 fea7 	bl	80046b0 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000968:	4817      	ldr	r0, [pc, #92]	@ (80009c8 <display+0xac>)
 800096a:	f000 ffc1 	bl	80018f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000974:	4814      	ldr	r0, [pc, #80]	@ (80009c8 <display+0xac>)
 8000976:	f000 ffbb 	bl	80018f0 <HAL_GPIO_WritePin>
	  osSemaphoreAcquire(segmentSem02Handle, 100);
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <display+0xb0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2164      	movs	r1, #100	@ 0x64
 8000980:	4618      	mov	r0, r3
 8000982:	f003 ff39 	bl	80047f8 <osSemaphoreAcquire>
	  segment_wright_logic(&segment,segment_counter%10);
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <display+0xb4>)
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <display+0xb8>)
 800098c:	fba3 1302 	umull	r1, r3, r3, r2
 8000990:	08d9      	lsrs	r1, r3, #3
 8000992:	460b      	mov	r3, r1
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <display+0xbc>)
 80009a2:	f003 fca9 	bl	80042f8 <segment_wright_logic>
	  osSemaphoreRelease(segmentSem02Handle);
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <display+0xb0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 ff76 	bl	800489c <osSemaphoreRelease>
	  osDelay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f003 fe7d 	bl	80046b0 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <display+0xac>)
 80009be:	f000 ff97 	bl	80018f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80009c2:	bf00      	nop
 80009c4:	e7ae      	b.n	8000924 <display+0x8>
 80009c6:	bf00      	nop
 80009c8:	40020400 	.word	0x40020400
 80009cc:	200000c4 	.word	0x200000c4
 80009d0:	200000a4 	.word	0x200000a4
 80009d4:	cccccccd 	.word	0xcccccccd
 80009d8:	20000010 	.word	0x20000010

080009dc <HAL_UART_RxCpltCallback>:
  /* USER CODE END display */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_UART_RxCpltCallback+0x34>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10b      	bne.n	8000a06 <HAL_UART_RxCpltCallback+0x2a>

    	HAL_UART_Receive_IT(&huart1, &reciever, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <HAL_UART_RxCpltCallback+0x38>)
 80009f2:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <HAL_UART_RxCpltCallback+0x3c>)
 80009f4:	f002 fd05 	bl	8003402 <HAL_UART_Receive_IT>
    	xQueueSendToBackFromISR(myQueuereceiveHandle,(void *)&reciever,NULL);
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_UART_RxCpltCallback+0x40>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <HAL_UART_RxCpltCallback+0x38>)
 8000a02:	f004 ffe1 	bl	80059c8 <xQueueGenericSendFromISR>
    }
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000
 8000a14:	200000cb 	.word	0x200000cb
 8000a18:	20000164 	.word	0x20000164
 8000a1c:	200000bc 	.word	0x200000bc

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a30      	ldr	r2, [pc, #192]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, traffic1_green_Pin|traffic1_yellow_Pin|traffic1_red_Pin|seg_control2_Pin
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f24f 613f 	movw	r1, #63039	@ 0xf63f
 8000a90:	481c      	ldr	r0, [pc, #112]	@ (8000b04 <MX_GPIO_Init+0xe4>)
 8000a92:	f000 ff2d 	bl	80018f0 <HAL_GPIO_WritePin>
                          |seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin
                          |traffic3_green_Pin|traffic3_yellow_Pin|traffic3_red_Pin|seg_control1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000a9c:	481a      	ldr	r0, [pc, #104]	@ (8000b08 <MX_GPIO_Init+0xe8>)
 8000a9e:	f000 ff27 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ir_1_Pin|ir_2_Pin;
 8000aa2:	2330      	movs	r3, #48	@ 0x30
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <MX_GPIO_Init+0xe8>)
 8000ab6:	f000 fd7f 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = traffic1_green_Pin|traffic1_yellow_Pin|traffic1_red_Pin|seg_control2_Pin
 8000aba:	f24f 633f 	movw	r3, #63039	@ 0xf63f
 8000abe:	60fb      	str	r3, [r7, #12]
                          |seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin
                          |traffic3_green_Pin|traffic3_yellow_Pin|traffic3_red_Pin|seg_control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <MX_GPIO_Init+0xe4>)
 8000ad4:	f000 fd70 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_GPIO_Init+0xe8>)
 8000af2:	f000 fd61 	bl	80015b8 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020000 	.word	0x40020000

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb9c 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f820 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff ff82 	bl	8000a20 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b1c:	f000 f990 	bl	8000e40 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b20:	f000 fa92 	bl	8001048 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b24:	f000 faba 	bl	800109c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b28:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <main+0x40>)
 8000b2a:	f001 fbd5 	bl	80022d8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &reciever, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4907      	ldr	r1, [pc, #28]	@ (8000b50 <main+0x44>)
 8000b32:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <main+0x48>)
 8000b34:	f002 fc65 	bl	8003402 <HAL_UART_Receive_IT>
  MX_USART2_UART_Init();
 8000b38:	f000 fab0 	bl	800109c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b3c:	f003 fcdc 	bl	80044f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b40:	f7ff fcc6 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b44:	f003 fcfc 	bl	8004540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <main+0x3c>
 8000b4c:	200000d4 	.word	0x200000d4
 8000b50:	200000cb 	.word	0x200000cb
 8000b54:	20000164 	.word	0x20000164

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	@ 0x50
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2230      	movs	r2, #48	@ 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 f838 	bl	8007bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a27      	ldr	r2, [pc, #156]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba4:	4a20      	ldr	r2, [pc, #128]	@ (8000c28 <SystemClock_Config+0xd0>)
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bcc:	2319      	movs	r3, #25
 8000bce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bd0:	23a8      	movs	r3, #168	@ 0xa8
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fe9f 	bl	8001924 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bec:	f000 f82d 	bl	8000c4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 f901 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c18:	f000 f817 	bl	8000c4a <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	@ 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c3c:	d101      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3e:	f000 fb27 	bl	8001290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4e:	b672      	cpsid	i
}
 8000c50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c52:	bf00      	nop
 8000c54:	e7fd      	b.n	8000c52 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_MspInit+0x54>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <HAL_MspInit+0x54>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_MspInit+0x54>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_MspInit+0x54>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fbcf 	bl	8001440 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <HAL_InitTick+0xe8>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	4a33      	ldr	r2, [pc, #204]	@ (8000d98 <HAL_InitTick+0xe8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd0:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_InitTick+0xe8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fa74 	bl	80021d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 fa45 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8000cfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cfc:	e004      	b.n	8000d08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cfe:	f001 fa41 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8000d02:	4603      	mov	r3, r0
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_InitTick+0xec>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	3b01      	subs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000d3e:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d40:	f001 fa7a 	bl	8002238 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11b      	bne.n	8000d8a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000d52:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <HAL_InitTick+0xf0>)
 8000d54:	f001 fac0 	bl	80022d8 <HAL_TIM_Base_Start_IT>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d66:	201c      	movs	r0, #28
 8000d68:	f000 fb86 	bl	8001478 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d808      	bhi.n	8000d84 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	201c      	movs	r0, #28
 8000d78:	f000 fb62 	bl	8001440 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <HAL_InitTick+0xf4>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e002      	b.n	8000d8a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3738      	adds	r7, #56	@ 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	200000d4 	.word	0x200000d4
 8000da4:	20000008 	.word	0x20000008

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <TIM1_CC_IRQHandler+0x10>)
 8000de6:	f001 fbe3 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000011c 	.word	0x2000011c

08000df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <TIM2_IRQHandler+0x10>)
 8000dfa:	f001 fbd9 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000d4 	.word	0x200000d4

08000e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <USART1_IRQHandler+0x10>)
 8000e0e:	f002 fb1d 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000164 	.word	0x20000164

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	@ 0x58
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2220      	movs	r2, #32
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 feaf 	bl	8007bdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000e80:	4a3f      	ldr	r2, [pc, #252]	@ (8000f80 <MX_TIM1_Init+0x140>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000e86:	f240 3247 	movw	r2, #839	@ 0x347
 8000e8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000e94:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000e98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eac:	4833      	ldr	r0, [pc, #204]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000eae:	f001 f9c3 	bl	8002238 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000eb8:	f7ff fec7 	bl	8000c4a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000eca:	f001 fd23 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ed4:	f7ff feb9 	bl	8000c4a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ed8:	4828      	ldr	r0, [pc, #160]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000eda:	f001 fa5f 	bl	800239c <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ee4:	f7ff feb1 	bl	8000c4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000ef8:	f002 f8d4 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f02:	f7ff fea2 	bl	8000c4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	@ 0x60
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000f2c:	f001 fc30 	bl	8002790 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f36:	f7ff fe88 	bl	8000c4a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000f5e:	f002 f90f 	bl	8003180 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f68:	f7ff fe6f 	bl	8000c4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM1_Init+0x13c>)
 8000f6e:	f000 f831 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3758      	adds	r7, #88	@ 0x58
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000011c 	.word	0x2000011c
 8000f80:	40010000 	.word	0x40010000

08000f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_TIM_Base_MspInit+0x48>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d115      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	201b      	movs	r0, #27
 8000fb8:	f000 fa42 	bl	8001440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fbc:	201b      	movs	r0, #27
 8000fbe:	f000 fa5b 	bl	8001478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11e      	bne.n	8001034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001012:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_TIM_MspPostInit+0x70>)
 8001030:	f000 fac2 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010000 	.word	0x40010000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <MX_USART1_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 8001054:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_USART1_UART_Init+0x4c>)
 8001080:	f002 f8e4 	bl	800324c <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f7ff fdde 	bl	8000c4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000164 	.word	0x20000164
 8001098:	40011000 	.word	0x40011000

0800109c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <MX_USART2_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f002 f8ba 	bl	800324c <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f7ff fdb4 	bl	8000c4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001ac 	.word	0x200001ac
 80010ec:	40004400 	.word	0x40004400

080010f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a36      	ldr	r2, [pc, #216]	@ (80011e8 <HAL_UART_MspInit+0xf8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d135      	bne.n	800117e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	4b35      	ldr	r3, [pc, #212]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a34      	ldr	r2, [pc, #208]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a2d      	ldr	r2, [pc, #180]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800114a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800115c:	2307      	movs	r3, #7
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <HAL_UART_MspInit+0x100>)
 8001168:	f000 fa26 	bl	80015b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2025      	movs	r0, #37	@ 0x25
 8001172:	f000 f965 	bl	8001440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001176:	2025      	movs	r0, #37	@ 0x25
 8001178:	f000 f97e 	bl	8001478 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800117c:	e030      	b.n	80011e0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <HAL_UART_MspInit+0x104>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d12b      	bne.n	80011e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a16      	ldr	r2, [pc, #88]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_UART_MspInit+0xfc>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011c0:	230c      	movs	r3, #12
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d0:	2307      	movs	r3, #7
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_UART_MspInit+0x100>)
 80011dc:	f000 f9ec 	bl	80015b8 <HAL_GPIO_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	@ 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40004400 	.word	0x40004400

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011fc:	f7ff fe0e 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f006 fd37 	bl	8007c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fc6f 	bl	8000b0c <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800123c:	08007f5c 	.word	0x08007f5c
  ldr r2, =_sbss
 8001240:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001244:	20004d20 	.word	0x20004d20

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f8d8 	bl	800142a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f7ff fd18 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fcea 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	200001f4 	.word	0x200001f4

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
 {
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
 }
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200001f4 	.word	0x200001f4

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff4c 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001452:	f7ff ff61 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffb1 	bl	80013c4 <NVIC_EncodePriority>
 8001462:	4602      	mov	r2, r0
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff80 	bl	8001370 <__NVIC_SetPriority>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff54 	bl	8001334 <__NVIC_EnableIRQ>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a2:	f7ff ff09 	bl	80012b8 <HAL_GetTick>
 80014a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d008      	beq.n	80014c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2280      	movs	r2, #128	@ 0x80
 80014b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e052      	b.n	800156c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0216 	bic.w	r2, r2, #22
 80014d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_DMA_Abort+0x62>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0208 	bic.w	r2, r2, #8
 8001504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001516:	e013      	b.n	8001540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001518:	f7ff fece 	bl	80012b8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d90c      	bls.n	8001540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e015      	b.n	800156c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e4      	bne.n	8001518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	223f      	movs	r2, #63	@ 0x3f
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e159      	b.n	8001888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8148 	bne.w	8001882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a2 	beq.w	8001882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4a56      	ldr	r2, [pc, #344]	@ (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174c:	6453      	str	r3, [r2, #68]	@ 0x44
 800174e:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a52      	ldr	r2, [pc, #328]	@ (80018a4 <HAL_GPIO_Init+0x2ec>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	@ (80018a8 <HAL_GPIO_Init+0x2f0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x202>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	@ (80018ac <HAL_GPIO_Init+0x2f4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x1fe>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a47      	ldr	r2, [pc, #284]	@ (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x1fa>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a46      	ldr	r2, [pc, #280]	@ (80018b4 <HAL_GPIO_Init+0x2fc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x1f6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a45      	ldr	r2, [pc, #276]	@ (80018b8 <HAL_GPIO_Init+0x300>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x1f2>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	@ (80018a4 <HAL_GPIO_Init+0x2ec>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <HAL_GPIO_Init+0x304>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a2f      	ldr	r2, [pc, #188]	@ (80018bc <HAL_GPIO_Init+0x304>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_GPIO_Init+0x304>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a24      	ldr	r2, [pc, #144]	@ (80018bc <HAL_GPIO_Init+0x304>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_GPIO_Init+0x304>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001852:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <HAL_GPIO_Init+0x304>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_GPIO_Init+0x304>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187c:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <HAL_GPIO_Init+0x304>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f aea2 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e267      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d075      	beq.n	8001a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001942:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d00c      	beq.n	8001968 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194e:	4b85      	ldr	r3, [pc, #532]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001956:	2b08      	cmp	r3, #8
 8001958:	d112      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195a:	4b82      	ldr	r3, [pc, #520]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001966:	d10b      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	4b7e      	ldr	r3, [pc, #504]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d05b      	beq.n	8001a2c <HAL_RCC_OscConfig+0x108>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d157      	bne.n	8001a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e242      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x74>
 800198a:	4b76      	ldr	r3, [pc, #472]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a75      	ldr	r2, [pc, #468]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x98>
 80019a2:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 80019bc:	4b69      	ldr	r3, [pc, #420]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a68      	ldr	r2, [pc, #416]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a65      	ldr	r2, [pc, #404]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc6c 	bl	80012b8 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fc68 	bl	80012b8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	@ 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e207      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xc0>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc58 	bl	80012b8 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc54 	bl	80012b8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1f3      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0xe8>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a46:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a52:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x152>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1c7      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4937      	ldr	r1, [pc, #220]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCC_OscConfig+0x244>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fc0d 	bl	80012b8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fc09 	bl	80012b8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1a8      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4925      	ldr	r1, [pc, #148]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_RCC_OscConfig+0x244>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fbec 	bl	80012b8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbe8 	bl	80012b8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e187      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d036      	beq.n	8001b7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_RCC_OscConfig+0x248>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fbcc 	bl	80012b8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fbc8 	bl	80012b8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e167      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_OscConfig+0x240>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x200>
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_OscConfig+0x248>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fbb5 	bl	80012b8 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	e00e      	b.n	8001b70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff fbb1 	bl	80012b8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d907      	bls.n	8001b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e150      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	42470000 	.word	0x42470000
 8001b6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b88      	ldr	r3, [pc, #544]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ea      	bne.n	8001b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8097 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b81      	ldr	r3, [pc, #516]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a7c      	ldr	r2, [pc, #496]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b7a      	ldr	r3, [pc, #488]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b77      	ldr	r3, [pc, #476]	@ (8001d98 <HAL_RCC_OscConfig+0x474>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b74      	ldr	r3, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0x474>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a73      	ldr	r2, [pc, #460]	@ (8001d98 <HAL_RCC_OscConfig+0x474>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fb71 	bl	80012b8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7ff fb6d 	bl	80012b8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e10c      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <HAL_RCC_OscConfig+0x474>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2ea>
 8001c00:	4b64      	ldr	r3, [pc, #400]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c04:	4a63      	ldr	r2, [pc, #396]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x324>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x30c>
 8001c16:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c22:	4b5c      	ldr	r3, [pc, #368]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c26:	4a5b      	ldr	r2, [pc, #364]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x324>
 8001c30:	4b58      	ldr	r3, [pc, #352]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c34:	4a57      	ldr	r2, [pc, #348]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3c:	4b55      	ldr	r3, [pc, #340]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c40:	4a54      	ldr	r2, [pc, #336]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d015      	beq.n	8001c7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff fb32 	bl	80012b8 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff fb2e 	bl	80012b8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0cb      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	4b49      	ldr	r3, [pc, #292]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ee      	beq.n	8001c58 <HAL_RCC_OscConfig+0x334>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fb1c 	bl	80012b8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb18 	bl	80012b8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0b5      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b39      	ldr	r3, [pc, #228]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	4a38      	ldr	r2, [pc, #224]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a1 	beq.w	8001e04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d05c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d141      	bne.n	8001d5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <HAL_RCC_OscConfig+0x478>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff faec 	bl	80012b8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fae8 	bl	80012b8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e087      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	491b      	ldr	r1, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x478>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fac1 	bl	80012b8 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fabd 	bl	80012b8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e05c      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x416>
 8001d58:	e054      	b.n	8001e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_OscConfig+0x478>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff faaa 	bl	80012b8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff faa6 	bl	80012b8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e045      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x444>
 8001d86:	e03d      	b.n	8001e04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e038      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x4ec>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d028      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d121      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d11a      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d111      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0cc      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b68      	ldr	r3, [pc, #416]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d90c      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b65      	ldr	r3, [pc, #404]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d044      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d119      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e067      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4934      	ldr	r1, [pc, #208]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7ff f9d8 	bl	80012b8 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7ff f9d4 	bl	80012b8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e04f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d20c      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	490a      	ldr	r1, [pc, #40]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	5ccb      	ldrb	r3, [r1, r3]
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe78 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	08007f34 	.word	0x08007f34
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe4:	b090      	sub	sp, #64	@ 0x40
 8001fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff8:	4b59      	ldr	r3, [pc, #356]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d00d      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x40>
 8002004:	2b08      	cmp	r3, #8
 8002006:	f200 80a1 	bhi.w	800214c <HAL_RCC_GetSysClockFreq+0x16c>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x34>
 800200e:	2b04      	cmp	r3, #4
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x3a>
 8002012:	e09b      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002014:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x184>)
 8002016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002018:	e09b      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800201a:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x188>)
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800201e:	e098      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002020:	4b4f      	ldr	r3, [pc, #316]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202a:	4b4d      	ldr	r3, [pc, #308]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d028      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002036:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	2200      	movs	r2, #0
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	627a      	str	r2, [r7, #36]	@ 0x24
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002048:	2100      	movs	r1, #0
 800204a:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x188>)
 800204c:	fb03 f201 	mul.w	r2, r3, r1
 8002050:	2300      	movs	r3, #0
 8002052:	fb00 f303 	mul.w	r3, r0, r3
 8002056:	4413      	add	r3, r2
 8002058:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x188>)
 800205a:	fba0 1202 	umull	r1, r2, r0, r2
 800205e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002060:	460a      	mov	r2, r1
 8002062:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002066:	4413      	add	r3, r2
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	2200      	movs	r2, #0
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	61fa      	str	r2, [r7, #28]
 8002072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800207a:	f7fe f8b1 	bl	80001e0 <__aeabi_uldivmod>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4613      	mov	r3, r2
 8002084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002086:	e053      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002088:	4b35      	ldr	r3, [pc, #212]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	2200      	movs	r2, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	617a      	str	r2, [r7, #20]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800209a:	f04f 0b00 	mov.w	fp, #0
 800209e:	4652      	mov	r2, sl
 80020a0:	465b      	mov	r3, fp
 80020a2:	f04f 0000 	mov.w	r0, #0
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	0159      	lsls	r1, r3, #5
 80020ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b0:	0150      	lsls	r0, r2, #5
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	ebb2 080a 	subs.w	r8, r2, sl
 80020ba:	eb63 090b 	sbc.w	r9, r3, fp
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020d2:	ebb2 0408 	subs.w	r4, r2, r8
 80020d6:	eb63 0509 	sbc.w	r5, r3, r9
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	00eb      	lsls	r3, r5, #3
 80020e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e8:	00e2      	lsls	r2, r4, #3
 80020ea:	4614      	mov	r4, r2
 80020ec:	461d      	mov	r5, r3
 80020ee:	eb14 030a 	adds.w	r3, r4, sl
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	eb45 030b 	adc.w	r3, r5, fp
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002106:	4629      	mov	r1, r5
 8002108:	028b      	lsls	r3, r1, #10
 800210a:	4621      	mov	r1, r4
 800210c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002110:	4621      	mov	r1, r4
 8002112:	028a      	lsls	r2, r1, #10
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211a:	2200      	movs	r2, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	60fa      	str	r2, [r7, #12]
 8002120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002124:	f7fe f85c 	bl	80001e0 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x180>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	3301      	adds	r3, #1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002140:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800214a:	e002      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x184>)
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002154:	4618      	mov	r0, r3
 8002156:	3740      	adds	r7, #64	@ 0x40
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	017d7840 	.word	0x017d7840

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08007f44 	.word	0x08007f44

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffdc 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	@ (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08007f44 	.word	0x08007f44

080021d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220f      	movs	r2, #15
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_RCC_GetClockConfig+0x60>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0207 	and.w	r2, r3, #7
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fe90 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fc3c 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e044      	b.n	800237a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1e      	ldr	r2, [pc, #120]	@ (8002388 <HAL_TIM_Base_Start_IT+0xb0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231a:	d013      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1a      	ldr	r2, [pc, #104]	@ (800238c <HAL_TIM_Base_Start_IT+0xb4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a19      	ldr	r2, [pc, #100]	@ (8002390 <HAL_TIM_Base_Start_IT+0xb8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <HAL_TIM_Base_Start_IT+0xbc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x6c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a16      	ldr	r2, [pc, #88]	@ (8002398 <HAL_TIM_Base_Start_IT+0xc0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d111      	bne.n	8002368 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d010      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002366:	e007      	b.n	8002378 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40000400 	.word	0x40000400
 8002390:	40000800 	.word	0x40000800
 8002394:	40000c00 	.word	0x40000c00
 8002398:	40014000 	.word	0x40014000

0800239c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f839 	bl	800243a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 fb8a 	bl	8002af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_TIM_PWM_Start+0x24>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	bf14      	ite	ne
 800246c:	2301      	movne	r3, #1
 800246e:	2300      	moveq	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e022      	b.n	80024ba <HAL_TIM_PWM_Start+0x6a>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d109      	bne.n	800248e <HAL_TIM_PWM_Start+0x3e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	bf14      	ite	ne
 8002486:	2301      	movne	r3, #1
 8002488:	2300      	moveq	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e015      	b.n	80024ba <HAL_TIM_PWM_Start+0x6a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d109      	bne.n	80024a8 <HAL_TIM_PWM_Start+0x58>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e008      	b.n	80024ba <HAL_TIM_PWM_Start+0x6a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e068      	b.n	8002594 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x82>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024d0:	e013      	b.n	80024fa <HAL_TIM_PWM_Start+0xaa>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_PWM_Start+0x92>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e0:	e00b      	b.n	80024fa <HAL_TIM_PWM_Start+0xaa>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_PWM_Start+0xa2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f0:	e003      	b.n	80024fa <HAL_TIM_PWM_Start+0xaa>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2201      	movs	r2, #1
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fda8 	bl	8003058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a23      	ldr	r2, [pc, #140]	@ (800259c <HAL_TIM_PWM_Start+0x14c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d107      	bne.n	8002522 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_TIM_PWM_Start+0x14c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_TIM_PWM_Start+0x10e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002534:	d013      	beq.n	800255e <HAL_TIM_PWM_Start+0x10e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_TIM_PWM_Start+0x150>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_TIM_PWM_Start+0x10e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <HAL_TIM_PWM_Start+0x154>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_TIM_PWM_Start+0x10e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <HAL_TIM_PWM_Start+0x158>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIM_PWM_Start+0x10e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <HAL_TIM_PWM_Start+0x15c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d010      	beq.n	8002592 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	e007      	b.n	8002592 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40010000 	.word	0x40010000
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40000800 	.word	0x40000800
 80025a8:	40000c00 	.word	0x40000c00
 80025ac:	40014000 	.word	0x40014000

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa5b 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa4d 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fa5e 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa35 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa27 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fa38 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa0f 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa01 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fa12 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9e9 	bl	8002ab6 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9db 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f9ec 	bl	8002aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0201 	mvn.w	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fa88 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fd7c 	bl	8003238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9bd 	bl	8002ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fd4e 	bl	8003224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0ae      	b.n	800290c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	f200 809f 	bhi.w	80028fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027be:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	080028fd 	.word	0x080028fd
 80027cc:	080028fd 	.word	0x080028fd
 80027d0:	080028fd 	.word	0x080028fd
 80027d4:	08002839 	.word	0x08002839
 80027d8:	080028fd 	.word	0x080028fd
 80027dc:	080028fd 	.word	0x080028fd
 80027e0:	080028fd 	.word	0x080028fd
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	080028fd 	.word	0x080028fd
 80027ec:	080028fd 	.word	0x080028fd
 80027f0:	080028fd 	.word	0x080028fd
 80027f4:	080028bb 	.word	0x080028bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fa04 	bl	8002c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	619a      	str	r2, [r3, #24]
      break;
 8002836:	e064      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fa4a 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6999      	ldr	r1, [r3, #24]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]
      break;
 8002878:	e043      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fa95 	bl	8002db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0208 	orr.w	r2, r2, #8
 8002894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0204 	bic.w	r2, r2, #4
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
      break;
 80028b8:	e023      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fadf 	bl	8002e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69d9      	ldr	r1, [r3, #28]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	021a      	lsls	r2, r3, #8
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	61da      	str	r2, [r3, #28]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800290a:	7dfb      	ldrb	r3, [r7, #23]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b4      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd4>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	f000 8086 	beq.w	8002a86 <HAL_TIM_ConfigClockSource+0x172>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b70      	cmp	r3, #112	@ 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>
 8002984:	2b70      	cmp	r3, #112	@ 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b60      	cmp	r3, #96	@ 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x11a>
 800298c:	2b60      	cmp	r3, #96	@ 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xfa>
 8002994:	2b50      	cmp	r3, #80	@ 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x13a>
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b30      	cmp	r3, #48	@ 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b30      	cmp	r3, #48	@ 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ca:	f000 fb25 	bl	8003018 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04f      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	f000 fb0e 	bl	8003018 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 fa82 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	@ 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fadb 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 faa1 	bl	8002f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	@ 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 facb 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 fa62 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fabb 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 fab2 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf0 <TIM_Base_SetConfig+0xfc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00f      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a37      	ldr	r2, [pc, #220]	@ (8002bf4 <TIM_Base_SetConfig+0x100>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a36      	ldr	r2, [pc, #216]	@ (8002bf8 <TIM_Base_SetConfig+0x104>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a35      	ldr	r2, [pc, #212]	@ (8002bfc <TIM_Base_SetConfig+0x108>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf0 <TIM_Base_SetConfig+0xfc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <TIM_Base_SetConfig+0x100>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <TIM_Base_SetConfig+0x104>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <TIM_Base_SetConfig+0x108>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	@ (8002c00 <TIM_Base_SetConfig+0x10c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <TIM_Base_SetConfig+0x110>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <TIM_Base_SetConfig+0x114>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <TIM_Base_SetConfig+0xfc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
  }
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f023 0201 	bic.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <TIM_OC1_SetConfig+0xc8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10c      	bne.n	8002c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0308 	bic.w	r3, r3, #8
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <TIM_OC1_SetConfig+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 0210 	bic.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0320 	bic.w	r3, r3, #32
 8002d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <TIM_OC2_SetConfig+0xd4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10d      	bne.n	8002d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <TIM_OC2_SetConfig+0xd4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d113      	bne.n	8002d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000

08002db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10d      	bne.n	8002e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	@ (8002e80 <TIM_OC3_SetConfig+0xd0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d113      	bne.n	8002e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40010000 	.word	0x40010000

08002e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a10      	ldr	r2, [pc, #64]	@ (8002f20 <TIM_OC4_SetConfig+0x9c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d109      	bne.n	8002ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000

08002f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0201 	bic.w	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 030a 	bic.w	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 0210 	bic.w	r2, r3, #16
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 0307 	orr.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	431a      	orrs	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2201      	movs	r2, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e050      	b.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003108:	d013      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a16      	ldr	r2, [pc, #88]	@ (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a13      	ldr	r2, [pc, #76]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10c      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000

08003180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003198:	2302      	movs	r3, #2
 800319a:	e03d      	b.n	8003218 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e042      	b.n	80032e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ff3c 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	@ 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800328e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fdbd 	bl	8003e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	@ 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	d175      	bne.n	80033f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Transmit+0x2c>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e06e      	b.n	80033fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2221      	movs	r2, #33	@ 0x21
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332a:	f7fd ffc5 	bl	80012b8 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003344:	d108      	bne.n	8003358 <HAL_UART_Transmit+0x6c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d104      	bne.n	8003358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	e003      	b.n	8003360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003360:	e02e      	b.n	80033c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fb1f 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e03a      	b.n	80033fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3302      	adds	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e007      	b.n	80033b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	3301      	adds	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1cb      	bne.n	8003362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2140      	movs	r1, #64	@ 0x40
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 faeb 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e006      	b.n	80033fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b20      	cmp	r3, #32
 800341a:	d112      	bne.n	8003442 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_UART_Receive_IT+0x26>
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e00b      	b.n	8003444 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb12 	bl	8003a62 <UART_Start_Receive_IT>
 800343e:	4603      	mov	r3, r0
 8003440:	e000      	b.n	8003444 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0ba      	sub	sp, #232	@ 0xe8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800348a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fbf2 	bl	8003c94 <UART_Receive_IT>
      return;
 80034b0:	e25b      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80de 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80d1 	beq.w	8003678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
 800352a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800355a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	f043 0208 	orr.w	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 81f2 	beq.w	8003960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb7d 	bl	8003c94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <HAL_UART_IRQHandler+0x17a>
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04f      	beq.n	8003666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa85 	bl	8003ad6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d141      	bne.n	800365e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800360a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800361e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1d9      	bne.n	80035da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d013      	beq.n	8003656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	4a7e      	ldr	r2, [pc, #504]	@ (800382c <HAL_UART_IRQHandler+0x3e0>)
 8003634:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd ff9a 	bl	8001574 <HAL_DMA_Abort_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003650:	4610      	mov	r0, r2
 8003652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e00e      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f994 	bl	8003984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00a      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f990 	bl	8003984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e006      	b.n	8003674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f98c 	bl	8003984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003672:	e175      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	bf00      	nop
    return;
 8003676:	e173      	b.n	8003960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 814f 	bne.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8148 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8141 	beq.w	8003920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036be:	2b40      	cmp	r3, #64	@ 0x40
 80036c0:	f040 80b6 	bne.w	8003830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8145 	beq.w	8003964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f080 813e 	bcs.w	8003964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fa:	f000 8088 	beq.w	800380e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800371c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800372a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800372e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003736:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1d9      	bne.n	80036fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3314      	adds	r3, #20
 8003750:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800375a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800376e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003772:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e1      	bne.n	800374a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800379c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e3      	bne.n	8003786 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e3      	bne.n	80037cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fe43 	bl	8001494 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800381c:	b29b      	uxth	r3, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	b29b      	uxth	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f8b7 	bl	8003998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800382a:	e09b      	b.n	8003964 <HAL_UART_IRQHandler+0x518>
 800382c:	08003b9d 	.word	0x08003b9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003838:	b29b      	uxth	r3, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808e 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800384c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8089 	beq.w	8003968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800387a:	647a      	str	r2, [r7, #68]	@ 0x44
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	623b      	str	r3, [r7, #32]
   return(result);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f83d 	bl	8003998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391e:	e023      	b.n	8003968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f943 	bl	8003bc4 <UART_Transmit_IT>
    return;
 800393e:	e014      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f983 	bl	8003c64 <UART_EndTransmit_IT>
    return;
 800395e:	e004      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
    return;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_UART_IRQHandler+0x51e>
      return;
 8003968:	bf00      	nop
  }
}
 800396a:	37e8      	adds	r7, #232	@ 0xe8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	e03b      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d037      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd fc75 	bl	80012b8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e03a      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d023      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	d020      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d01d      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d116      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f857 	bl	8003ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d0b4      	beq.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2222      	movs	r2, #34	@ 0x22
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b095      	sub	sp, #84	@ 0x54
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003afe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d119      	bne.n	8003b82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b6e:	61ba      	str	r2, [r7, #24]
 8003b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e5      	bne.n	8003b4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b90:	bf00      	nop
 8003b92:	3754      	adds	r7, #84	@ 0x54
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fee4 	bl	8003984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b21      	cmp	r3, #33	@ 0x21
 8003bd6:	d13e      	bne.n	8003c56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be0:	d114      	bne.n	8003c0c <UART_Transmit_IT+0x48>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d110      	bne.n	8003c0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]
 8003c0a:	e008      	b.n	8003c1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	1c59      	adds	r1, r3, #1
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6211      	str	r1, [r2, #32]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10f      	bne.n	8003c52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fe73 	bl	8003970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08c      	sub	sp, #48	@ 0x30
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b22      	cmp	r3, #34	@ 0x22
 8003ca6:	f040 80ae 	bne.w	8003e06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb2:	d117      	bne.n	8003ce4 <UART_Receive_IT+0x50>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d113      	bne.n	8003ce4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ce2:	e026      	b.n	8003d32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	d007      	beq.n	8003d08 <UART_Receive_IT+0x74>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <UART_Receive_IT+0x82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e008      	b.n	8003d28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d15d      	bne.n	8003e02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0220 	bic.w	r2, r2, #32
 8003d54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d135      	bne.n	8003df8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	613b      	str	r3, [r7, #16]
   return(result);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	623a      	str	r2, [r7, #32]
 8003db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	69f9      	ldr	r1, [r7, #28]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d10a      	bne.n	8003dea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fdd1 	bl	8003998 <HAL_UARTEx_RxEventCallback>
 8003df6:	e002      	b.n	8003dfe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fc fdef 	bl	80009dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e002      	b.n	8003e08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	@ 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e14:	b0c0      	sub	sp, #256	@ 0x100
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	68d9      	ldr	r1, [r3, #12]
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	ea40 0301 	orr.w	r3, r0, r1
 8003e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e68:	f021 010c 	bic.w	r1, r1, #12
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e76:	430b      	orrs	r3, r1
 8003e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	6999      	ldr	r1, [r3, #24]
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	ea40 0301 	orr.w	r3, r0, r1
 8003e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80040dc <UART_SetConfig+0x2cc>)
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d005      	beq.n	8003eb0 <UART_SetConfig+0xa0>
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80040e0 <UART_SetConfig+0x2d0>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d104      	bne.n	8003eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe f97c 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003eb8:	e003      	b.n	8003ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eba:	f7fe f963 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ecc:	f040 810c 	bne.w	80040e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eea:	415b      	adcs	r3, r3
 8003eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	eb12 0801 	adds.w	r8, r2, r1
 8003ef8:	4629      	mov	r1, r5
 8003efa:	eb43 0901 	adc.w	r9, r3, r1
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f12:	4690      	mov	r8, r2
 8003f14:	4699      	mov	r9, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	eb18 0303 	adds.w	r3, r8, r3
 8003f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f20:	462b      	mov	r3, r5
 8003f22:	eb49 0303 	adc.w	r3, r9, r3
 8003f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f3e:	460b      	mov	r3, r1
 8003f40:	18db      	adds	r3, r3, r3
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f44:	4613      	mov	r3, r2
 8003f46:	eb42 0303 	adc.w	r3, r2, r3
 8003f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f54:	f7fc f944 	bl	80001e0 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4b61      	ldr	r3, [pc, #388]	@ (80040e4 <UART_SetConfig+0x2d4>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	011c      	lsls	r4, r3, #4
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f80:	415b      	adcs	r3, r3
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f88:	4641      	mov	r1, r8
 8003f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb43 0b01 	adc.w	fp, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa8:	4692      	mov	sl, r2
 8003faa:	469b      	mov	fp, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	eb1a 0303 	adds.w	r3, sl, r3
 8003fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	18db      	adds	r3, r3, r3
 8003fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fda:	4613      	mov	r3, r2
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fea:	f7fc f8f9 	bl	80001e0 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2264      	movs	r2, #100	@ 0x64
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	1acb      	subs	r3, r1, r3
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800400a:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <UART_SetConfig+0x2d4>)
 800400c:	fba3 2302 	umull	r2, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004018:	441c      	add	r4, r3
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004024:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004034:	415b      	adcs	r3, r3
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800403c:	4641      	mov	r1, r8
 800403e:	1851      	adds	r1, r2, r1
 8004040:	6339      	str	r1, [r7, #48]	@ 0x30
 8004042:	4649      	mov	r1, r9
 8004044:	414b      	adcs	r3, r1
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004054:	4659      	mov	r1, fp
 8004056:	00cb      	lsls	r3, r1, #3
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405e:	4651      	mov	r1, sl
 8004060:	00ca      	lsls	r2, r1, #3
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	4603      	mov	r3, r0
 8004068:	4642      	mov	r2, r8
 800406a:	189b      	adds	r3, r3, r2
 800406c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004070:	464b      	mov	r3, r9
 8004072:	460a      	mov	r2, r1
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004088:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800408c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004090:	460b      	mov	r3, r1
 8004092:	18db      	adds	r3, r3, r3
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004096:	4613      	mov	r3, r2
 8004098:	eb42 0303 	adc.w	r3, r2, r3
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040a6:	f7fc f89b 	bl	80001e0 <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <UART_SetConfig+0x2d4>)
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	2164      	movs	r1, #100	@ 0x64
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	3332      	adds	r3, #50	@ 0x32
 80040c2:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <UART_SetConfig+0x2d4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f003 0207 	and.w	r2, r3, #7
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4422      	add	r2, r4
 80040d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d8:	e106      	b.n	80042e8 <UART_SetConfig+0x4d8>
 80040da:	bf00      	nop
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040fa:	4642      	mov	r2, r8
 80040fc:	464b      	mov	r3, r9
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	6239      	str	r1, [r7, #32]
 8004102:	415b      	adcs	r3, r3
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
 8004106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410a:	4641      	mov	r1, r8
 800410c:	1854      	adds	r4, r2, r1
 800410e:	4649      	mov	r1, r9
 8004110:	eb43 0501 	adc.w	r5, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	00eb      	lsls	r3, r5, #3
 800411e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	4614      	mov	r4, r2
 8004126:	461d      	mov	r5, r3
 8004128:	4643      	mov	r3, r8
 800412a:	18e3      	adds	r3, r4, r3
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004130:	464b      	mov	r3, r9
 8004132:	eb45 0303 	adc.w	r3, r5, r3
 8004136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004156:	4629      	mov	r1, r5
 8004158:	008b      	lsls	r3, r1, #2
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004160:	4621      	mov	r1, r4
 8004162:	008a      	lsls	r2, r1, #2
 8004164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004168:	f7fc f83a 	bl	80001e0 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4b60      	ldr	r3, [pc, #384]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004172:	fba3 2302 	umull	r2, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	011c      	lsls	r4, r3, #4
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004184:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	61b9      	str	r1, [r7, #24]
 8004194:	415b      	adcs	r3, r3
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6139      	str	r1, [r7, #16]
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041d0:	464b      	mov	r3, r9
 80041d2:	460a      	mov	r2, r1
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041f4:	4649      	mov	r1, r9
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	4641      	mov	r1, r8
 80041fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fe:	4641      	mov	r1, r8
 8004200:	008a      	lsls	r2, r1, #2
 8004202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004206:	f7fb ffeb 	bl	80001e0 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4611      	mov	r1, r2
 8004210:	4b38      	ldr	r3, [pc, #224]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004212:	fba3 2301 	umull	r2, r3, r3, r1
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	1acb      	subs	r3, r1, r3
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	3332      	adds	r3, #50	@ 0x32
 8004224:	4a33      	ldr	r2, [pc, #204]	@ (80042f4 <UART_SetConfig+0x4e4>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004230:	441c      	add	r4, r3
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004236:	2200      	movs	r2, #0
 8004238:	673b      	str	r3, [r7, #112]	@ 0x70
 800423a:	677a      	str	r2, [r7, #116]	@ 0x74
 800423c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	415b      	adcs	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004282:	464b      	mov	r3, r9
 8004284:	460a      	mov	r2, r1
 8004286:	eb42 0303 	adc.w	r3, r2, r3
 800428a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	663b      	str	r3, [r7, #96]	@ 0x60
 8004296:	667a      	str	r2, [r7, #100]	@ 0x64
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042b6:	f7fb ff93 	bl	80001e0 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <UART_SetConfig+0x4e4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	@ 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	@ 0x32
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <UART_SetConfig+0x4e4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4422      	add	r2, r4
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f4:	51eb851f 	.word	0x51eb851f

080042f8 <segment_wright_logic>:
 *      Author: mokhtar
 */

#include "Segment.h"

void segment_wright_logic(const segment_type *segment , uint8_t number){
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
	for(int i = 0 ; i < 4 ; i++){
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e016      	b.n	8004338 <segment_wright_logic+0x40>
		HAL_GPIO_WritePin((segment->led_port[i]), (segment->led_pin[i]), (number >> i) & 0x01);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	3208      	adds	r2, #8
 8004318:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	fa42 f303 	asr.w	r3, r2, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	f7fd fadf 	bl	80018f0 <HAL_GPIO_WritePin>
	for(int i = 0 ; i < 4 ; i++){
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b03      	cmp	r3, #3
 800433c:	dde5      	ble.n	800430a <segment_wright_logic+0x12>
	}

}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <servo_Motor_Start_angle_90>:

#include "servo.h"

uint32_t l_value;

void servo_Motor_Start_angle_90 (servo_t *servo){
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	//TIM2->CCR1 = 200;
	switch (servo->channel_select){
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	791b      	ldrb	r3, [r3, #4]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d835      	bhi.n	80043c4 <servo_Motor_Start_angle_90+0x7c>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <servo_Motor_Start_angle_90+0x18>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043c5 	.word	0x080043c5
 8004368:	080043c5 	.word	0x080043c5
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043a1 	.word	0x080043a1
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043c5 	.word	0x080043c5
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043b9 	.word	0x080043b9
	case ch1:
		servo->htim->Instance->CCR1 = 200;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	22c8      	movs	r2, #200	@ 0xc8
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 800439e:	e011      	b.n	80043c4 <servo_Motor_Start_angle_90+0x7c>
	case ch2:
		servo->htim->Instance->CCR2 = 200;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	22c8      	movs	r2, #200	@ 0xc8
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 80043aa:	e00b      	b.n	80043c4 <servo_Motor_Start_angle_90+0x7c>
	case ch3:
		servo->htim->Instance->CCR3 = 200;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	22c8      	movs	r2, #200	@ 0xc8
 80043b4:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 80043b6:	e005      	b.n	80043c4 <servo_Motor_Start_angle_90+0x7c>
	case ch4:
		servo->htim->Instance->CCR4 = 200;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	22c8      	movs	r2, #200	@ 0xc8
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80043c2:	bf00      	nop
	}

	HAL_TIM_PWM_Start(servo->htim, servo->channel_select);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7fe f83e 	bl	8002450 <HAL_TIM_PWM_Start>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <servo_Motor_Start_angle_N90>:
			break;
		}
	HAL_TIM_PWM_Start(servo->htim, servo->channel_select);
}

void servo_Motor_Start_angle_N90(servo_t *servo){
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	switch (servo->channel_select){
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	791b      	ldrb	r3, [r3, #4]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d835      	bhi.n	8004458 <servo_Motor_Start_angle_N90+0x7c>
 80043ec:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <servo_Motor_Start_angle_N90+0x18>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004459 	.word	0x08004459
 80043fc:	08004459 	.word	0x08004459
 8004400:	08004459 	.word	0x08004459
 8004404:	08004435 	.word	0x08004435
 8004408:	08004459 	.word	0x08004459
 800440c:	08004459 	.word	0x08004459
 8004410:	08004459 	.word	0x08004459
 8004414:	08004441 	.word	0x08004441
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
 8004424:	0800444d 	.word	0x0800444d
		case ch1:
			servo->htim->Instance->CCR1 = 100;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2264      	movs	r2, #100	@ 0x64
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004432:	e011      	b.n	8004458 <servo_Motor_Start_angle_N90+0x7c>
		case ch2:
			servo->htim->Instance->CCR2 = 100;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2264      	movs	r2, #100	@ 0x64
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800443e:	e00b      	b.n	8004458 <servo_Motor_Start_angle_N90+0x7c>
		case ch3:
			servo->htim->Instance->CCR3 = 100;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2264      	movs	r2, #100	@ 0x64
 8004448:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800444a:	e005      	b.n	8004458 <servo_Motor_Start_angle_N90+0x7c>
		case ch4:
			servo->htim->Instance->CCR4 = 100;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2264      	movs	r2, #100	@ 0x64
 8004454:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8004456:	bf00      	nop
		}
	HAL_TIM_PWM_Start(servo->htim, servo->channel_select);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fd fff4 	bl	8002450 <HAL_TIM_PWM_Start>
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <__NVIC_SetPriority>:
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	@ (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	@ (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <SysTick_Handler+0x1c>)
 80044ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044cc:	f002 fe4a 	bl	8007164 <xTaskGetSchedulerState>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044d6:	f000 ff2f 	bl	8005338 <xPortSysTickHandler>
  }
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010

080044e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044e8:	2100      	movs	r1, #0
 80044ea:	f06f 0004 	mvn.w	r0, #4
 80044ee:	f7ff ffbf 	bl	8004470 <__NVIC_SetPriority>
#endif
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044fe:	f3ef 8305 	mrs	r3, IPSR
 8004502:	603b      	str	r3, [r7, #0]
  return(result);
 8004504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800450a:	f06f 0305 	mvn.w	r3, #5
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	e00c      	b.n	800452c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <osKernelInitialize+0x44>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800451a:	4b08      	ldr	r3, [pc, #32]	@ (800453c <osKernelInitialize+0x44>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004520:	2300      	movs	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e002      	b.n	800452c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800452c:	687b      	ldr	r3, [r7, #4]
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	200001f8 	.word	0x200001f8

08004540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004546:	f3ef 8305 	mrs	r3, IPSR
 800454a:	603b      	str	r3, [r7, #0]
  return(result);
 800454c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004552:	f06f 0305 	mvn.w	r3, #5
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	e010      	b.n	800457c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800455a:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <osKernelStart+0x48>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d109      	bne.n	8004576 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004562:	f7ff ffbf 	bl	80044e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004566:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <osKernelStart+0x48>)
 8004568:	2202      	movs	r2, #2
 800456a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800456c:	f002 f996 	bl	800689c <vTaskStartScheduler>
      stat = osOK;
 8004570:	2300      	movs	r3, #0
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e002      	b.n	800457c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800457c:	687b      	ldr	r3, [r7, #4]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200001f8 	.word	0x200001f8

0800458c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	@ 0x38
 8004590:	af04      	add	r7, sp, #16
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800459c:	f3ef 8305 	mrs	r3, IPSR
 80045a0:	617b      	str	r3, [r7, #20]
  return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d17e      	bne.n	80046a6 <osThreadNew+0x11a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d07b      	beq.n	80046a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045ae:	2380      	movs	r3, #128	@ 0x80
 80045b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045b2:	2318      	movs	r3, #24
 80045b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d045      	beq.n	8004652 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <osThreadNew+0x48>
        name = attr->name;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <osThreadNew+0x6e>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b38      	cmp	r3, #56	@ 0x38
 80045ec:	d805      	bhi.n	80045fa <osThreadNew+0x6e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <osThreadNew+0x72>
        return (NULL);
 80045fa:	2300      	movs	r3, #0
 80045fc:	e054      	b.n	80046a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <osThreadNew+0xa8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2ba7      	cmp	r3, #167	@ 0xa7
 800461c:	d90a      	bls.n	8004634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <osThreadNew+0xa8>
        mem = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e010      	b.n	8004656 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10c      	bne.n	8004656 <osThreadNew+0xca>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <osThreadNew+0xca>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <osThreadNew+0xca>
          mem = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e001      	b.n	8004656 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d110      	bne.n	800467e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004664:	9202      	str	r2, [sp, #8]
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f001 ff1e 	bl	80064b4 <xTaskCreateStatic>
 8004678:	4603      	mov	r3, r0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e013      	b.n	80046a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	b29a      	uxth	r2, r3
 8004688:	f107 0310 	add.w	r3, r7, #16
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f001 ff6c 	bl	8006574 <xTaskCreate>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <osThreadNew+0x11a>
            hTask = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046a6:	693b      	ldr	r3, [r7, #16]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b8:	f3ef 8305 	mrs	r3, IPSR
 80046bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <osDelay+0x1c>
    stat = osErrorISR;
 80046c4:	f06f 0305 	mvn.w	r3, #5
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e007      	b.n	80046dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f002 f8aa 	bl	8006830 <vTaskDelay>
    }
  }

  return (stat);
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08a      	sub	sp, #40	@ 0x28
 80046ea:	af02      	add	r7, sp, #8
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f6:	f3ef 8305 	mrs	r3, IPSR
 80046fa:	613b      	str	r3, [r7, #16]
  return(result);
 80046fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d175      	bne.n	80047ee <osSemaphoreNew+0x108>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d072      	beq.n	80047ee <osSemaphoreNew+0x108>
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d86e      	bhi.n	80047ee <osSemaphoreNew+0x108>
    mem = -1;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
 8004714:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <osSemaphoreNew+0x4c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b4f      	cmp	r3, #79	@ 0x4f
 800472a:	d902      	bls.n	8004732 <osSemaphoreNew+0x4c>
        mem = 1;
 800472c:	2301      	movs	r3, #1
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e00c      	b.n	800474c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <osSemaphoreNew+0x66>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <osSemaphoreNew+0x66>
          mem = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e001      	b.n	800474c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d04c      	beq.n	80047ee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d128      	bne.n	80047ac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10a      	bne.n	8004776 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2203      	movs	r2, #3
 8004766:	9200      	str	r2, [sp, #0]
 8004768:	2200      	movs	r2, #0
 800476a:	2100      	movs	r1, #0
 800476c:	2001      	movs	r0, #1
 800476e:	f000 fedf 	bl	8005530 <xQueueGenericCreateStatic>
 8004772:	61f8      	str	r0, [r7, #28]
 8004774:	e005      	b.n	8004782 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004776:	2203      	movs	r2, #3
 8004778:	2100      	movs	r1, #0
 800477a:	2001      	movs	r0, #1
 800477c:	f000 ff55 	bl	800562a <xQueueGenericCreate>
 8004780:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d022      	beq.n	80047ce <osSemaphoreNew+0xe8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01f      	beq.n	80047ce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800478e:	2300      	movs	r3, #0
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	69f8      	ldr	r0, [r7, #28]
 8004796:	f001 f815 	bl	80057c4 <xQueueGenericSend>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d016      	beq.n	80047ce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80047a0:	69f8      	ldr	r0, [r7, #28]
 80047a2:	f001 fcb3 	bl	800610c <vQueueDelete>
            hSemaphore = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e010      	b.n	80047ce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 ff93 	bl	80056e6 <xQueueCreateCountingSemaphoreStatic>
 80047c0:	61f8      	str	r0, [r7, #28]
 80047c2:	e004      	b.n	80047ce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 ffc6 	bl	8005758 <xQueueCreateCountingSemaphore>
 80047cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e001      	b.n	80047e6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	69f8      	ldr	r0, [r7, #28]
 80047ea:	f001 fddb 	bl	80063a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047ee:	69fb      	ldr	r3, [r7, #28]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004810:	f06f 0303 	mvn.w	r3, #3
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e039      	b.n	800488c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004818:	f3ef 8305 	mrs	r3, IPSR
 800481c:	60fb      	str	r3, [r7, #12]
  return(result);
 800481e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800482a:	f06f 0303 	mvn.w	r3, #3
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e02c      	b.n	800488c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	461a      	mov	r2, r3
 800483c:	2100      	movs	r1, #0
 800483e:	6938      	ldr	r0, [r7, #16]
 8004840:	f001 fbe2 	bl	8006008 <xQueueReceiveFromISR>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	d003      	beq.n	8004852 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800484a:	f06f 0302 	mvn.w	r3, #2
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e01c      	b.n	800488c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <osSemaphoreAcquire+0x94>
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <osSemaphoreAcquire+0xa0>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e010      	b.n	800488c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6938      	ldr	r0, [r7, #16]
 800486e:	f001 fabb 	bl	8005de8 <xQueueSemaphoreTake>
 8004872:	4603      	mov	r3, r0
 8004874:	2b01      	cmp	r3, #1
 8004876:	d009      	beq.n	800488c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800487e:	f06f 0301 	mvn.w	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e002      	b.n	800488c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004886:	f06f 0302 	mvn.w	r3, #2
 800488a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800488c:	697b      	ldr	r3, [r7, #20]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80048b2:	f06f 0303 	mvn.w	r3, #3
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e02c      	b.n	8004914 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ba:	f3ef 8305 	mrs	r3, IPSR
 80048be:	60fb      	str	r3, [r7, #12]
  return(result);
 80048c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	4619      	mov	r1, r3
 80048d0:	6938      	ldr	r0, [r7, #16]
 80048d2:	f001 f917 	bl	8005b04 <xQueueGiveFromISR>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d003      	beq.n	80048e4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80048dc:	f06f 0302 	mvn.w	r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e017      	b.n	8004914 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d014      	beq.n	8004914 <osSemaphoreRelease+0x78>
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <osSemaphoreRelease+0x84>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	e00b      	b.n	8004914 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048fc:	2300      	movs	r3, #0
 80048fe:	2200      	movs	r2, #0
 8004900:	2100      	movs	r1, #0
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	f000 ff5e 	bl	80057c4 <xQueueGenericSend>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d002      	beq.n	8004914 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800490e:	f06f 0302 	mvn.w	r3, #2
 8004912:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004914:	697b      	ldr	r3, [r7, #20]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004934:	f3ef 8305 	mrs	r3, IPSR
 8004938:	613b      	str	r3, [r7, #16]
  return(result);
 800493a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800493c:	2b00      	cmp	r3, #0
 800493e:	d15f      	bne.n	8004a00 <osMessageQueueNew+0xdc>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d05c      	beq.n	8004a00 <osMessageQueueNew+0xdc>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d059      	beq.n	8004a00 <osMessageQueueNew+0xdc>
    mem = -1;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d029      	beq.n	80049ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <osMessageQueueNew+0x62>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b4f      	cmp	r3, #79	@ 0x4f
 8004966:	d90e      	bls.n	8004986 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <osMessageQueueNew+0x62>
        mem = 1;
 8004980:	2301      	movs	r3, #1
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e014      	b.n	80049b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d110      	bne.n	80049b0 <osMessageQueueNew+0x8c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e001      	b.n	80049b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10b      	bne.n	80049ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2100      	movs	r1, #0
 80049c0:	9100      	str	r1, [sp, #0]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fdb3 	bl	8005530 <xQueueGenericCreateStatic>
 80049ca:	61f8      	str	r0, [r7, #28]
 80049cc:	e008      	b.n	80049e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80049d4:	2200      	movs	r2, #0
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fe26 	bl	800562a <xQueueGenericCreate>
 80049de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e001      	b.n	80049f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	69f8      	ldr	r0, [r7, #28]
 80049fc:	f001 fcd2 	bl	80063a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a00:	69fb      	ldr	r3, [r7, #28]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a07      	ldr	r2, [pc, #28]	@ (8004a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a06      	ldr	r2, [pc, #24]	@ (8004a3c <vApplicationGetIdleTaskMemory+0x30>)
 8004a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2280      	movs	r2, #128	@ 0x80
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	200001fc 	.word	0x200001fc
 8004a3c:	200002a4 	.word	0x200002a4

08004a40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a07      	ldr	r2, [pc, #28]	@ (8004a6c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a06      	ldr	r2, [pc, #24]	@ (8004a70 <vApplicationGetTimerTaskMemory+0x30>)
 8004a56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	200004a4 	.word	0x200004a4
 8004a70:	2000054c 	.word	0x2000054c

08004a74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	@ 0x28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a80:	f001 ff7c 	bl	800697c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a84:	4b5c      	ldr	r3, [pc, #368]	@ (8004bf8 <pvPortMalloc+0x184>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a8c:	f000 f924 	bl	8004cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a90:	4b5a      	ldr	r3, [pc, #360]	@ (8004bfc <pvPortMalloc+0x188>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8095 	bne.w	8004bc8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01e      	beq.n	8004ae2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d015      	beq.n	8004ae2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	3308      	adds	r3, #8
 8004abe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d06f      	beq.n	8004bc8 <pvPortMalloc+0x154>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <pvPortMalloc+0x18c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d86a      	bhi.n	8004bc8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004af2:	4b44      	ldr	r3, [pc, #272]	@ (8004c04 <pvPortMalloc+0x190>)
 8004af4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <pvPortMalloc+0x190>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afc:	e004      	b.n	8004b08 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d903      	bls.n	8004b1a <pvPortMalloc+0xa6>
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f1      	bne.n	8004afe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <pvPortMalloc+0x184>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d051      	beq.n	8004bc8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	4413      	add	r3, r2
 8004b2c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1ad2      	subs	r2, r2, r3
 8004b3e:	2308      	movs	r3, #8
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d920      	bls.n	8004b88 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <pvPortMalloc+0xfc>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	613b      	str	r3, [r7, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b82:	69b8      	ldr	r0, [r7, #24]
 8004b84:	f000 f90a 	bl	8004d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <pvPortMalloc+0x18c>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <pvPortMalloc+0x18c>)
 8004b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b96:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <pvPortMalloc+0x18c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <pvPortMalloc+0x194>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d203      	bcs.n	8004baa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ba2:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <pvPortMalloc+0x18c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <pvPortMalloc+0x194>)
 8004ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <pvPortMalloc+0x188>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <pvPortMalloc+0x198>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a11      	ldr	r2, [pc, #68]	@ (8004c0c <pvPortMalloc+0x198>)
 8004bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bc8:	f001 fee6 	bl	8006998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <pvPortMalloc+0x17a>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <pvPortMalloc+0x176>
	return pvReturn;
 8004bee:	69fb      	ldr	r3, [r7, #28]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	@ 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20004554 	.word	0x20004554
 8004bfc:	20004568 	.word	0x20004568
 8004c00:	20004558 	.word	0x20004558
 8004c04:	2000454c 	.word	0x2000454c
 8004c08:	2000455c 	.word	0x2000455c
 8004c0c:	20004560 	.word	0x20004560

08004c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d04f      	beq.n	8004cc2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c22:	2308      	movs	r3, #8
 8004c24:	425b      	negs	r3, r3
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4413      	add	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4b25      	ldr	r3, [pc, #148]	@ (8004ccc <vPortFree+0xbc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <vPortFree+0x46>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60fb      	str	r3, [r7, #12]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <vPortFree+0x66>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60bb      	str	r3, [r7, #8]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <vPortFree+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <vPortFree+0xbc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c9c:	f001 fe6e 	bl	800697c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <vPortFree+0xc0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <vPortFree+0xc0>)
 8004cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cae:	6938      	ldr	r0, [r7, #16]
 8004cb0:	f000 f874 	bl	8004d9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <vPortFree+0xc4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4a06      	ldr	r2, [pc, #24]	@ (8004cd4 <vPortFree+0xc4>)
 8004cbc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004cbe:	f001 fe6b 	bl	8006998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cc2:	bf00      	nop
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20004568 	.word	0x20004568
 8004cd0:	20004558 	.word	0x20004558
 8004cd4:	20004564 	.word	0x20004564

08004cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cde:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ce4:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <prvHeapInit+0xac>)
 8004ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <prvHeapInit+0xac>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d10:	4a1d      	ldr	r2, [pc, #116]	@ (8004d88 <prvHeapInit+0xb0>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d16:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <prvHeapInit+0xb0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d24:	2208      	movs	r2, #8
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <prvHeapInit+0xb4>)
 8004d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d3a:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <prvHeapInit+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d42:	4b12      	ldr	r3, [pc, #72]	@ (8004d8c <prvHeapInit+0xb4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d58:	4b0c      	ldr	r3, [pc, #48]	@ (8004d8c <prvHeapInit+0xb4>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <prvHeapInit+0xb8>)
 8004d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a09      	ldr	r2, [pc, #36]	@ (8004d94 <prvHeapInit+0xbc>)
 8004d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <prvHeapInit+0xc0>)
 8004d72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	2000094c 	.word	0x2000094c
 8004d88:	2000454c 	.word	0x2000454c
 8004d8c:	20004554 	.word	0x20004554
 8004d90:	2000455c 	.word	0x2000455c
 8004d94:	20004558 	.word	0x20004558
 8004d98:	20004568 	.word	0x20004568

08004d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004da4:	4b28      	ldr	r3, [pc, #160]	@ (8004e48 <prvInsertBlockIntoFreeList+0xac>)
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e002      	b.n	8004db0 <prvInsertBlockIntoFreeList+0x14>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d8f7      	bhi.n	8004daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d108      	bne.n	8004dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d118      	bne.n	8004e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d00d      	beq.n	8004e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e008      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <prvInsertBlockIntoFreeList+0xb0>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e003      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d002      	beq.n	8004e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2000454c 	.word	0x2000454c
 8004e4c:	20004554 	.word	0x20004554

08004e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0208 	add.w	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f103 0208 	add.w	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f103 0208 	add.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d103      	bne.n	8004f12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e00c      	b.n	8004f2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3308      	adds	r3, #8
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <vListInsert+0x2e>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d2f6      	bcs.n	8004f1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d103      	bne.n	8004f98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1e5a      	subs	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800501c <pxPortInitialiseStack+0x64>)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3b14      	subs	r3, #20
 8004ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f06f 0202 	mvn.w	r2, #2
 8005006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3b20      	subs	r3, #32
 800500c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	08005021 	.word	0x08005021

08005020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800502a:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <prvTaskExitError+0x58>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d00b      	beq.n	800504c <prvTaskExitError+0x2c>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <prvTaskExitError+0x28>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60bb      	str	r3, [r7, #8]
}
 800505e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005060:	bf00      	nop
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0fc      	beq.n	8005062 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000034 	.word	0x20000034
 800507c:	00000000 	.word	0x00000000

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	4770      	bx	lr
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst2>:
 80050a0:	200045b4 	.word	0x200045b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050a8:	4808      	ldr	r0, [pc, #32]	@ (80050cc <prvPortStartFirstTask+0x24>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8814 	msr	CONTROL, r0
 80050ba:	b662      	cpsie	i
 80050bc:	b661      	cpsie	f
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	df00      	svc	0
 80050c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ca:	bf00      	nop
 80050cc:	e000ed08 	.word	0xe000ed08

080050d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <xPortStartScheduler+0x128>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10b      	bne.n	80050f8 <xPortStartScheduler+0x28>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050f8:	4b3e      	ldr	r3, [pc, #248]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a3f      	ldr	r2, [pc, #252]	@ (80051fc <xPortStartScheduler+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10b      	bne.n	800511a <xPortStartScheduler+0x4a>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800511a:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <xPortStartScheduler+0x130>)
 800511c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	22ff      	movs	r2, #255	@ 0xff
 800512a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <xPortStartScheduler+0x134>)
 8005140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <xPortStartScheduler+0x138>)
 8005144:	2207      	movs	r2, #7
 8005146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005148:	e009      	b.n	800515e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800514a:	4b2f      	ldr	r3, [pc, #188]	@ (8005208 <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3b01      	subs	r3, #1
 8005150:	4a2d      	ldr	r2, [pc, #180]	@ (8005208 <xPortStartScheduler+0x138>)
 8005152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d0ef      	beq.n	800514a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800516a:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	d00b      	beq.n	800518e <xPortStartScheduler+0xbe>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60bb      	str	r3, [r7, #8]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800518e:	4b1e      	ldr	r3, [pc, #120]	@ (8005208 <xPortStartScheduler+0x138>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <xPortStartScheduler+0x138>)
 8005196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <xPortStartScheduler+0x138>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <xPortStartScheduler+0x138>)
 80051a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051ac:	4b17      	ldr	r3, [pc, #92]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <xPortStartScheduler+0x13c>)
 80051b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <xPortStartScheduler+0x13c>)
 80051be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051c4:	f000 f8da 	bl	800537c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <xPortStartScheduler+0x140>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ce:	f000 f8f9 	bl	80053c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051de:	f7ff ff63 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e2:	f001 fd41 	bl	8006c68 <vTaskSwitchContext>
	prvTaskExitError();
 80051e6:	f7ff ff1b 	bl	8005020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed00 	.word	0xe000ed00
 80051f8:	410fc271 	.word	0x410fc271
 80051fc:	410fc270 	.word	0x410fc270
 8005200:	e000e400 	.word	0xe000e400
 8005204:	2000456c 	.word	0x2000456c
 8005208:	20004570 	.word	0x20004570
 800520c:	e000ed20 	.word	0xe000ed20
 8005210:	20000034 	.word	0x20000034
 8005214:	e000ef34 	.word	0xe000ef34

08005218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <vPortEnterCritical+0x5c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	4a0e      	ldr	r2, [pc, #56]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d110      	bne.n	8005266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <vPortEnterCritical+0x60>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <vPortEnterCritical+0x4e>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	603b      	str	r3, [r7, #0]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <vPortEnterCritical+0x4a>
	}
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000034 	.word	0x20000034
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <vPortExitCritical+0x50>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <vPortExitCritical+0x26>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	607b      	str	r3, [r7, #4]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <vPortExitCritical+0x50>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a08      	ldr	r2, [pc, #32]	@ (80052cc <vPortExitCritical+0x50>)
 80052aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <vPortExitCritical+0x50>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <vPortExitCritical+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000034 	.word	0x20000034

080052d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052d0:	f3ef 8009 	mrs	r0, PSP
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <pxCurrentTCBConst>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f01e 0f10 	tst.w	lr, #16
 80052e0:	bf08      	it	eq
 80052e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	6010      	str	r0, [r2, #0]
 80052ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052f4:	f380 8811 	msr	BASEPRI, r0
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f001 fcb2 	bl	8006c68 <vTaskSwitchContext>
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f380 8811 	msr	BASEPRI, r0
 800530c:	bc09      	pop	{r0, r3}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005316:	f01e 0f10 	tst.w	lr, #16
 800531a:	bf08      	it	eq
 800531c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005320:	f380 8809 	msr	PSP, r0
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst>:
 8005330:	200045b4 	.word	0x200045b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005352:	f001 fbcf 	bl	8006af4 <xTaskIncrementTick>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800535c:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <xPortSysTickHandler+0x40>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <vPortSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <vPortSetupTimerInterrupt+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <vPortSetupTimerInterrupt+0x40>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <vPortSetupTimerInterrupt+0x44>)
 800539a:	3b01      	subs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800539e:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	20000004 	.word	0x20000004
 80053bc:	10624dd3 	.word	0x10624dd3
 80053c0:	e000e014 	.word	0xe000e014

080053c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053d4 <vPortEnableVFP+0x10>
 80053c8:	6801      	ldr	r1, [r0, #0]
 80053ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ce:	6001      	str	r1, [r0, #0]
 80053d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed88 	.word	0xe000ed88

080053d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053de:	f3ef 8305 	mrs	r3, IPSR
 80053e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d915      	bls.n	8005416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ea:	4a18      	ldr	r2, [pc, #96]	@ (800544c <vPortValidateInterruptPriority+0x74>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <vPortValidateInterruptPriority+0x78>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	7afa      	ldrb	r2, [r7, #11]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d20b      	bcs.n	8005416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005416:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <vPortValidateInterruptPriority+0x7c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800541e:	4b0e      	ldr	r3, [pc, #56]	@ (8005458 <vPortValidateInterruptPriority+0x80>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d90b      	bls.n	800543e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	603b      	str	r3, [r7, #0]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <vPortValidateInterruptPriority+0x62>
	}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e3f0 	.word	0xe000e3f0
 8005450:	2000456c 	.word	0x2000456c
 8005454:	e000ed0c 	.word	0xe000ed0c
 8005458:	20004570 	.word	0x20004570

0800545c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xQueueGenericReset+0x2c>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	60bb      	str	r3, [r7, #8]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005488:	f7ff fec6 	bl	8005218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	441a      	add	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b8:	3b01      	subs	r3, #1
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	@ 0xff
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	@ 0xff
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d114      	bne.n	8005508 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01a      	beq.n	800551c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3310      	adds	r3, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 fc74 	bl	8006dd8 <xTaskRemoveFromEventList>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <xQueueGenericReset+0xd0>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e009      	b.n	800551c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fc9f 	bl	8004e50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3324      	adds	r3, #36	@ 0x24
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fc9a 	bl	8004e50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800551c:	f7ff feae 	bl	800527c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005520:	2301      	movs	r3, #1
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	@ 0x38
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <xQueueGenericCreateStatic+0x56>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <xQueueGenericCreateStatic+0x5a>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <xQueueGenericCreateStatic+0x5c>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <xQueueGenericCreateStatic+0x84>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <xQueueGenericCreateStatic+0x88>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <xQueueGenericCreateStatic+0x8a>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055d6:	2350      	movs	r3, #80	@ 0x50
 80055d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b50      	cmp	r3, #80	@ 0x50
 80055de:	d00b      	beq.n	80055f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61bb      	str	r3, [r7, #24]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00d      	beq.n	8005620 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800560c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f840 	bl	80056a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005622:	4618      	mov	r0, r3
 8005624:	3730      	adds	r7, #48	@ 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800562a:	b580      	push	{r7, lr}
 800562c:	b08a      	sub	sp, #40	@ 0x28
 800562e:	af02      	add	r7, sp, #8
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <xQueueGenericCreate+0x2c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	613b      	str	r3, [r7, #16]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3350      	adds	r3, #80	@ 0x50
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fa05 	bl	8004a74 <pvPortMalloc>
 800566a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	3350      	adds	r3, #80	@ 0x50
 800567a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005684:	79fa      	ldrb	r2, [r7, #7]
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f805 	bl	80056a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005696:	69bb      	ldr	r3, [r7, #24]
	}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ce:	2101      	movs	r1, #1
 80056d0:	69b8      	ldr	r0, [r7, #24]
 80056d2:	f7ff fec3 	bl	800545c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b08a      	sub	sp, #40	@ 0x28
 80056ea:	af02      	add	r7, sp, #8
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61bb      	str	r3, [r7, #24]
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d90b      	bls.n	8005730 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	617b      	str	r3, [r7, #20]
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005730:	2302      	movs	r3, #2
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	2100      	movs	r1, #0
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fef8 	bl	8005530 <xQueueGenericCreateStatic>
 8005740:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800574e:	69fb      	ldr	r3, [r7, #28]
	}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	613b      	str	r3, [r7, #16]
}
 800577a:	bf00      	nop
 800577c:	bf00      	nop
 800577e:	e7fd      	b.n	800577c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d90b      	bls.n	80057a0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60fb      	str	r3, [r7, #12]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057a0:	2202      	movs	r2, #2
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff40 	bl	800562a <xQueueGenericCreate>
 80057aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057b8:	697b      	ldr	r3, [r7, #20]
	}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	@ 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057d2:	2300      	movs	r3, #0
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xQueueGenericSend+0x34>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <xQueueGenericSend+0x42>
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <xQueueGenericSend+0x46>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueGenericSend+0x48>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xQueueGenericSend+0x64>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d103      	bne.n	8005836 <xQueueGenericSend+0x72>
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <xQueueGenericSend+0x76>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <xQueueGenericSend+0x78>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <xQueueGenericSend+0x94>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	623b      	str	r3, [r7, #32]
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005858:	f001 fc84 	bl	8007164 <xTaskGetSchedulerState>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <xQueueGenericSend+0xa4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <xQueueGenericSend+0xa8>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <xQueueGenericSend+0xaa>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <xQueueGenericSend+0xc6>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	61fb      	str	r3, [r7, #28]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800588a:	f7ff fcc5 	bl	8005218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <xQueueGenericSend+0xdc>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d129      	bne.n	80058f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a6:	f000 fc6d 	bl	8006184 <prvCopyDataToQueue>
 80058aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	3324      	adds	r3, #36	@ 0x24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 fa8d 	bl	8006dd8 <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b3f      	ldr	r3, [pc, #252]	@ (80059c4 <xQueueGenericSend+0x200>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	e00a      	b.n	80058ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <xQueueGenericSend+0x200>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058ec:	f7ff fcc6 	bl	800527c <vPortExitCritical>
				return pdPASS;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e063      	b.n	80059bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058fa:	f7ff fcbf 	bl	800527c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	e05c      	b.n	80059bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	4618      	mov	r0, r3
 800590e:	f001 fac7 	bl	8006ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005916:	f7ff fcb1 	bl	800527c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800591a:	f001 f82f 	bl	800697c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800591e:	f7ff fc7b 	bl	8005218 <vPortEnterCritical>
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005928:	b25b      	sxtb	r3, r3
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d103      	bne.n	8005938 <xQueueGenericSend+0x174>
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800593e:	b25b      	sxtb	r3, r3
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x18a>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800594e:	f7ff fc95 	bl	800527c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005952:	1d3a      	adds	r2, r7, #4
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fab6 	bl	8006ecc <xTaskCheckForTimeOut>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d124      	bne.n	80059b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005968:	f000 fd04 	bl	8006374 <prvIsQueueFull>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d018      	beq.n	80059a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	3310      	adds	r3, #16
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f001 f9da 	bl	8006d34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005982:	f000 fc8f 	bl	80062a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005986:	f001 f807 	bl	8006998 <xTaskResumeAll>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f af7c 	bne.w	800588a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <xQueueGenericSend+0x200>)
 8005994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	e772      	b.n	800588a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a6:	f000 fc7d 	bl	80062a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059aa:	f000 fff5 	bl	8006998 <xTaskResumeAll>
 80059ae:	e76c      	b.n	800588a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059b2:	f000 fc77 	bl	80062a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059b6:	f000 ffef 	bl	8006998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3738      	adds	r7, #56	@ 0x38
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	e000ed04 	.word	0xe000ed04

080059c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b090      	sub	sp, #64	@ 0x40
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <xQueueGenericSendFromISR+0x3e>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <xQueueGenericSendFromISR+0x42>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <xQueueGenericSendFromISR+0x44>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSendFromISR+0x6e>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <xQueueGenericSendFromISR+0x72>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueGenericSendFromISR+0x74>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a58:	f7ff fcbe 	bl	80053d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <xQueueGenericSendFromISR+0xc2>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d12f      	bne.n	8005aea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005aa0:	f000 fb70 	bl	8006184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d112      	bne.n	8005ad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	3324      	adds	r3, #36	@ 0x24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f98c 	bl	8006dd8 <xTaskRemoveFromEventList>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00e      	beq.n	8005ae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	e007      	b.n	8005ae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ad8:	3301      	adds	r3, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	b25a      	sxtb	r2, r3
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ae8:	e001      	b.n	8005aee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f383 8811 	msr	BASEPRI, r3
}
 8005af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3740      	adds	r7, #64	@ 0x40
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	@ 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	61fb      	str	r3, [r7, #28]
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <xQueueGiveFromISR+0x5c>
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <xQueueGiveFromISR+0x60>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <xQueueGiveFromISR+0x62>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	61bb      	str	r3, [r7, #24]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b82:	f7ff fc29 	bl	80053d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b86:	f3ef 8211 	mrs	r2, BASEPRI
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	617a      	str	r2, [r7, #20]
 8005b9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d22b      	bcs.n	8005c0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d112      	bne.n	8005bf4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	3324      	adds	r3, #36	@ 0x24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f8fc 	bl	8006dd8 <xTaskRemoveFromEventList>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00e      	beq.n	8005c04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e007      	b.n	8005c04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	b25a      	sxtb	r2, r3
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c08:	e001      	b.n	8005c0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f383 8811 	msr	BASEPRI, r3
}
 8005c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3738      	adds	r7, #56	@ 0x38
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	@ 0x30
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xQueueReceive+0x32>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <xQueueReceive+0x40>
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <xQueueReceive+0x44>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <xQueueReceive+0x46>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <xQueueReceive+0x62>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	61fb      	str	r3, [r7, #28]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c86:	f001 fa6d 	bl	8007164 <xTaskGetSchedulerState>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <xQueueReceive+0x72>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <xQueueReceive+0x76>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <xQueueReceive+0x78>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <xQueueReceive+0x94>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	61bb      	str	r3, [r7, #24]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cb8:	f7ff faae 	bl	8005218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01f      	beq.n	8005d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ccc:	f000 fac4 	bl	8006258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00f      	beq.n	8005d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	3310      	adds	r3, #16
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f877 	bl	8006dd8 <xTaskRemoveFromEventList>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8005de4 <xQueueReceive+0x1c0>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d00:	f7ff fabc 	bl	800527c <vPortExitCritical>
				return pdPASS;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e069      	b.n	8005ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d0e:	f7ff fab5 	bl	800527c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e062      	b.n	8005ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d1c:	f107 0310 	add.w	r3, r7, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f8bd 	bl	8006ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d2a:	f7ff faa7 	bl	800527c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d2e:	f000 fe25 	bl	800697c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d32:	f7ff fa71 	bl	8005218 <vPortEnterCritical>
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d103      	bne.n	8005d4c <xQueueReceive+0x128>
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d52:	b25b      	sxtb	r3, r3
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d103      	bne.n	8005d62 <xQueueReceive+0x13e>
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d62:	f7ff fa8b 	bl	800527c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d66:	1d3a      	adds	r2, r7, #4
 8005d68:	f107 0310 	add.w	r3, r7, #16
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 f8ac 	bl	8006ecc <xTaskCheckForTimeOut>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d123      	bne.n	8005dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d7c:	f000 fae4 	bl	8006348 <prvIsQueueEmpty>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	3324      	adds	r3, #36	@ 0x24
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ffd0 	bl	8006d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d96:	f000 fa85 	bl	80062a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d9a:	f000 fdfd 	bl	8006998 <xTaskResumeAll>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d189      	bne.n	8005cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005da4:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <xQueueReceive+0x1c0>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	e780      	b.n	8005cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db8:	f000 fa74 	bl	80062a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dbc:	f000 fdec 	bl	8006998 <xTaskResumeAll>
 8005dc0:	e77a      	b.n	8005cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc4:	f000 fa6e 	bl	80062a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dc8:	f000 fde6 	bl	8006998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dce:	f000 fabb 	bl	8006348 <prvIsQueueEmpty>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f43f af6f 	beq.w	8005cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	@ 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	@ 0x38
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	623b      	str	r3, [r7, #32]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61fb      	str	r3, [r7, #28]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e3c:	f001 f992 	bl	8007164 <xTaskGetSchedulerState>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <xQueueSemaphoreTake+0x64>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xQueueSemaphoreTake+0x68>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xQueueSemaphoreTake+0x6a>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61bb      	str	r3, [r7, #24]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e6e:	f7ff f9d3 	bl	8005218 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d024      	beq.n	8005ec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	1e5a      	subs	r2, r3, #1
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e8e:	f001 fae3 	bl	8007458 <pvTaskIncrementMutexHeldCount>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00f      	beq.n	8005ec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	3310      	adds	r3, #16
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 ff97 	bl	8006dd8 <xTaskRemoveFromEventList>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005eb0:	4b54      	ldr	r3, [pc, #336]	@ (8006004 <xQueueSemaphoreTake+0x21c>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ec0:	f7ff f9dc 	bl	800527c <vPortExitCritical>
				return pdPASS;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e098      	b.n	8005ffa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d112      	bne.n	8005ef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	617b      	str	r3, [r7, #20]
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005eec:	f7ff f9c6 	bl	800527c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e082      	b.n	8005ffa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005efa:	f107 030c 	add.w	r3, r7, #12
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 ffce 	bl	8006ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f08:	f7ff f9b8 	bl	800527c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f0c:	f000 fd36 	bl	800697c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f10:	f7ff f982 	bl	8005218 <vPortEnterCritical>
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d103      	bne.n	8005f2a <xQueueSemaphoreTake+0x142>
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d103      	bne.n	8005f40 <xQueueSemaphoreTake+0x158>
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f40:	f7ff f99c 	bl	800527c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f44:	463a      	mov	r2, r7
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 ffbd 	bl	8006ecc <xTaskCheckForTimeOut>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d132      	bne.n	8005fbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f5a:	f000 f9f5 	bl	8006348 <prvIsQueueEmpty>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d026      	beq.n	8005fb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005f6c:	f7ff f954 	bl	8005218 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f913 	bl	80071a0 <xTaskPriorityInherit>
 8005f7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f7c:	f7ff f97e 	bl	800527c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f82:	3324      	adds	r3, #36	@ 0x24
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	4611      	mov	r1, r2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fed3 	bl	8006d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f90:	f000 f988 	bl	80062a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f94:	f000 fd00 	bl	8006998 <xTaskResumeAll>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f47f af67 	bne.w	8005e6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005fa0:	4b18      	ldr	r3, [pc, #96]	@ (8006004 <xQueueSemaphoreTake+0x21c>)
 8005fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	e75d      	b.n	8005e6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb4:	f000 f976 	bl	80062a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb8:	f000 fcee 	bl	8006998 <xTaskResumeAll>
 8005fbc:	e757      	b.n	8005e6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fc0:	f000 f970 	bl	80062a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fc4:	f000 fce8 	bl	8006998 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fca:	f000 f9bd 	bl	8006348 <prvIsQueueEmpty>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f43f af4c 	beq.w	8005e6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005fdc:	f7ff f91c 	bl	8005218 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fe2:	f000 f8b7 	bl	8006154 <prvGetDisinheritPriorityAfterTimeout>
 8005fe6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f9ae 	bl	8007350 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ff4:	f7ff f942 	bl	800527c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3738      	adds	r7, #56	@ 0x38
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	@ 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	623b      	str	r3, [r7, #32]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <xQueueReceiveFromISR+0x3c>
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <xQueueReceiveFromISR+0x40>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <xQueueReceiveFromISR+0x42>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	61fb      	str	r3, [r7, #28]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006066:	f7ff f9b7 	bl	80053d8 <vPortValidateInterruptPriority>
	__asm volatile
 800606a:	f3ef 8211 	mrs	r2, BASEPRI
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	61ba      	str	r2, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006082:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02f      	beq.n	80060f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060a0:	f000 f8da 	bl	8006258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d112      	bne.n	80060dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	3310      	adds	r3, #16
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fe88 	bl	8006dd8 <xTaskRemoveFromEventList>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e007      	b.n	80060ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060e0:	3301      	adds	r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	b25a      	sxtb	r2, r3
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80060ec:	2301      	movs	r3, #1
 80060ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f0:	e001      	b.n	80060f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006104:	4618      	mov	r0, r3
 8006106:	3738      	adds	r7, #56	@ 0x38
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <vQueueDelete+0x2a>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60bb      	str	r3, [r7, #8]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f95e 	bl	80063f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7fe fd62 	bl	8004c10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006176:	68fb      	ldr	r3, [r7, #12]
	}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10d      	bne.n	80061be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d14d      	bne.n	8006246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 f85e 	bl	8007270 <xTaskPriorityDisinherit>
 80061b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	e043      	b.n	8006246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d119      	bne.n	80061f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6858      	ldr	r0, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061cc:	461a      	mov	r2, r3
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	f001 fd88 	bl	8007ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	441a      	add	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d32b      	bcc.n	8006246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	e026      	b.n	8006246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68d8      	ldr	r0, [r3, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	461a      	mov	r2, r3
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	f001 fd6e 	bl	8007ce4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006210:	425b      	negs	r3, r3
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d207      	bcs.n	8006234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	425b      	negs	r3, r3
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d105      	bne.n	8006246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	3b01      	subs	r3, #1
 8006244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800624e:	697b      	ldr	r3, [r7, #20]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	441a      	add	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	d303      	bcc.n	800628c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68d9      	ldr	r1, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	461a      	mov	r2, r3
 8006296:	6838      	ldr	r0, [r7, #0]
 8006298:	f001 fd24 	bl	8007ce4 <memcpy>
	}
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062ac:	f7fe ffb4 	bl	8005218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b8:	e011      	b.n	80062de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3324      	adds	r3, #36	@ 0x24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fd86 	bl	8006dd8 <xTaskRemoveFromEventList>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062d2:	f000 fe5f 	bl	8006f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	3b01      	subs	r3, #1
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dce9      	bgt.n	80062ba <prvUnlockQueue+0x16>
 80062e6:	e000      	b.n	80062ea <prvUnlockQueue+0x46>
					break;
 80062e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	22ff      	movs	r2, #255	@ 0xff
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062f2:	f7fe ffc3 	bl	800527c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062f6:	f7fe ff8f 	bl	8005218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006302:	e011      	b.n	8006328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d012      	beq.n	8006332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3310      	adds	r3, #16
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fd61 	bl	8006dd8 <xTaskRemoveFromEventList>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800631c:	f000 fe3a 	bl	8006f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	3b01      	subs	r3, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800632c:	2b00      	cmp	r3, #0
 800632e:	dce9      	bgt.n	8006304 <prvUnlockQueue+0x60>
 8006330:	e000      	b.n	8006334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	22ff      	movs	r2, #255	@ 0xff
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800633c:	f7fe ff9e 	bl	800527c <vPortExitCritical>
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006350:	f7fe ff62 	bl	8005218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e001      	b.n	8006366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006366:	f7fe ff89 	bl	800527c <vPortExitCritical>

	return xReturn;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800637c:	f7fe ff4c 	bl	8005218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006388:	429a      	cmp	r2, r3
 800638a:	d102      	bne.n	8006392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e001      	b.n	8006396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006396:	f7fe ff71 	bl	800527c <vPortExitCritical>

	return xReturn;
 800639a:	68fb      	ldr	r3, [r7, #12]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e014      	b.n	80063de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063b4:	4a0f      	ldr	r2, [pc, #60]	@ (80063f4 <vQueueAddToRegistry+0x50>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063c0:	490c      	ldr	r1, [pc, #48]	@ (80063f4 <vQueueAddToRegistry+0x50>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063ca:	4a0a      	ldr	r2, [pc, #40]	@ (80063f4 <vQueueAddToRegistry+0x50>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4413      	add	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063d6:	e006      	b.n	80063e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b07      	cmp	r3, #7
 80063e2:	d9e7      	bls.n	80063b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20004574 	.word	0x20004574

080063f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e016      	b.n	8006434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006406:	4a10      	ldr	r2, [pc, #64]	@ (8006448 <vQueueUnregisterQueue+0x50>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d10b      	bne.n	800642e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006416:	4a0c      	ldr	r2, [pc, #48]	@ (8006448 <vQueueUnregisterQueue+0x50>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2100      	movs	r1, #0
 800641c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006420:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <vQueueUnregisterQueue+0x50>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	2200      	movs	r2, #0
 800642a:	605a      	str	r2, [r3, #4]
				break;
 800642c:	e006      	b.n	800643c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b07      	cmp	r3, #7
 8006438:	d9e5      	bls.n	8006406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20004574 	.word	0x20004574

0800644c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800645c:	f7fe fedc 	bl	8005218 <vPortEnterCritical>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d103      	bne.n	8006476 <vQueueWaitForMessageRestricted+0x2a>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800647c:	b25b      	sxtb	r3, r3
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d103      	bne.n	800648c <vQueueWaitForMessageRestricted+0x40>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800648c:	f7fe fef6 	bl	800527c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fc6d 	bl	8006d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f7ff fefc 	bl	80062a4 <prvUnlockQueue>
	}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	@ 0x38
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	623b      	str	r3, [r7, #32]
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61fb      	str	r3, [r7, #28]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064fe:	23a8      	movs	r3, #168	@ 0xa8
 8006500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2ba8      	cmp	r3, #168	@ 0xa8
 8006506:	d00b      	beq.n	8006520 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	61bb      	str	r3, [r7, #24]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01e      	beq.n	8006566 <xTaskCreateStatic+0xb2>
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01b      	beq.n	8006566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	2202      	movs	r2, #2
 800653c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006540:	2300      	movs	r3, #0
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f851 	bl	8006600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800655e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006560:	f000 f8f6 	bl	8006750 <prvAddNewTaskToReadyList>
 8006564:	e001      	b.n	800656a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800656a:	697b      	ldr	r3, [r7, #20]
	}
 800656c:	4618      	mov	r0, r3
 800656e:	3728      	adds	r7, #40	@ 0x28
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08c      	sub	sp, #48	@ 0x30
 8006578:	af04      	add	r7, sp, #16
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fa73 	bl	8004a74 <pvPortMalloc>
 800658e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00e      	beq.n	80065b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006596:	20a8      	movs	r0, #168	@ 0xa8
 8006598:	f7fe fa6c 	bl	8004a74 <pvPortMalloc>
 800659c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80065aa:	e005      	b.n	80065b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065ac:	6978      	ldr	r0, [r7, #20]
 80065ae:	f7fe fb2f 	bl	8004c10 <vPortFree>
 80065b2:	e001      	b.n	80065b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	2300      	movs	r3, #0
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	9302      	str	r3, [sp, #8]
 80065d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f80f 	bl	8006600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e2:	69f8      	ldr	r0, [r7, #28]
 80065e4:	f000 f8b4 	bl	8006750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065e8:	2301      	movs	r3, #1
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e002      	b.n	80065f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065ee:	f04f 33ff 	mov.w	r3, #4294967295
 80065f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065f4:	69bb      	ldr	r3, [r7, #24]
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	461a      	mov	r2, r3
 8006618:	21a5      	movs	r1, #165	@ 0xa5
 800661a:	f001 fadf 	bl	8007bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006628:	3b01      	subs	r3, #1
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f023 0307 	bic.w	r3, r3, #7
 8006636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	617b      	str	r3, [r7, #20]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01f      	beq.n	80066a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e012      	b.n	800668c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	7819      	ldrb	r1, [r3, #0]
 800666e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	3334      	adds	r3, #52	@ 0x34
 8006676:	460a      	mov	r2, r1
 8006678:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3301      	adds	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b0f      	cmp	r3, #15
 8006690:	d9e9      	bls.n	8006666 <prvInitialiseNewTask+0x66>
 8006692:	e000      	b.n	8006696 <prvInitialiseNewTask+0x96>
			{
				break;
 8006694:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800669e:	e003      	b.n	80066a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	2b37      	cmp	r3, #55	@ 0x37
 80066ac:	d901      	bls.n	80066b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066ae:	2337      	movs	r3, #55	@ 0x37
 80066b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fbe1 	bl	8004e90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	3318      	adds	r3, #24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fbdc 	bl	8004e90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	3354      	adds	r3, #84	@ 0x54
 8006702:	224c      	movs	r2, #76	@ 0x4c
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fa68 	bl	8007bdc <memset>
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	4a0d      	ldr	r2, [pc, #52]	@ (8006744 <prvInitialiseNewTask+0x144>)
 8006710:	659a      	str	r2, [r3, #88]	@ 0x58
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	4a0c      	ldr	r2, [pc, #48]	@ (8006748 <prvInitialiseNewTask+0x148>)
 8006716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	4a0c      	ldr	r2, [pc, #48]	@ (800674c <prvInitialiseNewTask+0x14c>)
 800671c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	f7fe fc48 	bl	8004fb8 <pxPortInitialiseStack>
 8006728:	4602      	mov	r2, r0
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673a:	bf00      	nop
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20004be0 	.word	0x20004be0
 8006748:	20004c48 	.word	0x20004c48
 800674c:	20004cb0 	.word	0x20004cb0

08006750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006758:	f7fe fd5e 	bl	8005218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800675c:	4b2d      	ldr	r3, [pc, #180]	@ (8006814 <prvAddNewTaskToReadyList+0xc4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a2c      	ldr	r2, [pc, #176]	@ (8006814 <prvAddNewTaskToReadyList+0xc4>)
 8006764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006766:	4b2c      	ldr	r3, [pc, #176]	@ (8006818 <prvAddNewTaskToReadyList+0xc8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800676e:	4a2a      	ldr	r2, [pc, #168]	@ (8006818 <prvAddNewTaskToReadyList+0xc8>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006774:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <prvAddNewTaskToReadyList+0xc4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d110      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800677c:	f000 fc2e 	bl	8006fdc <prvInitialiseTaskLists>
 8006780:	e00d      	b.n	800679e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006782:	4b26      	ldr	r3, [pc, #152]	@ (800681c <prvAddNewTaskToReadyList+0xcc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800678a:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <prvAddNewTaskToReadyList+0xc8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	429a      	cmp	r2, r3
 8006796:	d802      	bhi.n	800679e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006798:	4a1f      	ldr	r2, [pc, #124]	@ (8006818 <prvAddNewTaskToReadyList+0xc8>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006824 <prvAddNewTaskToReadyList+0xd4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <prvAddNewTaskToReadyList+0x74>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <prvAddNewTaskToReadyList+0xd4>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <prvAddNewTaskToReadyList+0xd8>)
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7fe fb65 	bl	8004eaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067e0:	f7fe fd4c 	bl	800527c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067e4:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <prvAddNewTaskToReadyList+0xcc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006818 <prvAddNewTaskToReadyList+0xc8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d207      	bcs.n	800680a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067fa:	4b0c      	ldr	r3, [pc, #48]	@ (800682c <prvAddNewTaskToReadyList+0xdc>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20004a88 	.word	0x20004a88
 8006818:	200045b4 	.word	0x200045b4
 800681c:	20004a94 	.word	0x20004a94
 8006820:	20004aa4 	.word	0x20004aa4
 8006824:	20004a90 	.word	0x20004a90
 8006828:	200045b8 	.word	0x200045b8
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <vTaskDelay+0x64>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <vTaskDelay+0x32>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60bb      	str	r3, [r7, #8]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006862:	f000 f88b 	bl	800697c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006866:	2100      	movs	r1, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fe09 	bl	8007480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800686e:	f000 f893 	bl	8006998 <xTaskResumeAll>
 8006872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <vTaskDelay+0x68>)
 800687c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20004ab0 	.word	0x20004ab0
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	@ 0x28
 80068a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068aa:	463a      	mov	r2, r7
 80068ac:	1d39      	adds	r1, r7, #4
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f8aa 	bl	8004a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	2300      	movs	r3, #0
 80068c8:	460a      	mov	r2, r1
 80068ca:	4924      	ldr	r1, [pc, #144]	@ (800695c <vTaskStartScheduler+0xc0>)
 80068cc:	4824      	ldr	r0, [pc, #144]	@ (8006960 <vTaskStartScheduler+0xc4>)
 80068ce:	f7ff fdf1 	bl	80064b4 <xTaskCreateStatic>
 80068d2:	4603      	mov	r3, r0
 80068d4:	4a23      	ldr	r2, [pc, #140]	@ (8006964 <vTaskStartScheduler+0xc8>)
 80068d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068d8:	4b22      	ldr	r3, [pc, #136]	@ (8006964 <vTaskStartScheduler+0xc8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068e0:	2301      	movs	r3, #1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e001      	b.n	80068ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d102      	bne.n	80068f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068f0:	f000 fe1a 	bl	8007528 <xTimerCreateTimerTask>
 80068f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d11b      	bne.n	8006934 <vTaskStartScheduler+0x98>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	613b      	str	r3, [r7, #16]
}
 800690e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006910:	4b15      	ldr	r3, [pc, #84]	@ (8006968 <vTaskStartScheduler+0xcc>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3354      	adds	r3, #84	@ 0x54
 8006916:	4a15      	ldr	r2, [pc, #84]	@ (800696c <vTaskStartScheduler+0xd0>)
 8006918:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800691a:	4b15      	ldr	r3, [pc, #84]	@ (8006970 <vTaskStartScheduler+0xd4>)
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006922:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <vTaskStartScheduler+0xd8>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006928:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <vTaskStartScheduler+0xdc>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800692e:	f7fe fbcf 	bl	80050d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006932:	e00f      	b.n	8006954 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d10b      	bne.n	8006954 <vTaskStartScheduler+0xb8>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <vTaskStartScheduler+0xb4>
}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	08007e30 	.word	0x08007e30
 8006960:	08006fad 	.word	0x08006fad
 8006964:	20004aac 	.word	0x20004aac
 8006968:	200045b4 	.word	0x200045b4
 800696c:	20000038 	.word	0x20000038
 8006970:	20004aa8 	.word	0x20004aa8
 8006974:	20004a94 	.word	0x20004a94
 8006978:	20004a8c 	.word	0x20004a8c

0800697c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006980:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <vTaskSuspendAll+0x18>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a03      	ldr	r2, [pc, #12]	@ (8006994 <vTaskSuspendAll+0x18>)
 8006988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20004ab0 	.word	0x20004ab0

08006998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069a6:	4b42      	ldr	r3, [pc, #264]	@ (8006ab0 <xTaskResumeAll+0x118>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	603b      	str	r3, [r7, #0]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069c6:	f7fe fc27 	bl	8005218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069ca:	4b39      	ldr	r3, [pc, #228]	@ (8006ab0 <xTaskResumeAll+0x118>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	4a37      	ldr	r2, [pc, #220]	@ (8006ab0 <xTaskResumeAll+0x118>)
 80069d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d4:	4b36      	ldr	r3, [pc, #216]	@ (8006ab0 <xTaskResumeAll+0x118>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d162      	bne.n	8006aa2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069dc:	4b35      	ldr	r3, [pc, #212]	@ (8006ab4 <xTaskResumeAll+0x11c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d05e      	beq.n	8006aa2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069e4:	e02f      	b.n	8006a46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e6:	4b34      	ldr	r3, [pc, #208]	@ (8006ab8 <xTaskResumeAll+0x120>)
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3318      	adds	r3, #24
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fab6 	bl	8004f64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fab1 	bl	8004f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a06:	4b2d      	ldr	r3, [pc, #180]	@ (8006abc <xTaskResumeAll+0x124>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d903      	bls.n	8006a16 <xTaskResumeAll+0x7e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	4a2a      	ldr	r2, [pc, #168]	@ (8006abc <xTaskResumeAll+0x124>)
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <xTaskResumeAll+0x128>)
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7fe fa3c 	bl	8004eaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	4b23      	ldr	r3, [pc, #140]	@ (8006ac4 <xTaskResumeAll+0x12c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a40:	4b21      	ldr	r3, [pc, #132]	@ (8006ac8 <xTaskResumeAll+0x130>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a46:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab8 <xTaskResumeAll+0x120>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1cb      	bne.n	80069e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a54:	f000 fb66 	bl	8007124 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a58:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <xTaskResumeAll+0x134>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a64:	f000 f846 	bl	8006af4 <xTaskIncrementTick>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a6e:	4b16      	ldr	r3, [pc, #88]	@ (8006ac8 <xTaskResumeAll+0x130>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f1      	bne.n	8006a64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a80:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <xTaskResumeAll+0x134>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a86:	4b10      	ldr	r3, [pc, #64]	@ (8006ac8 <xTaskResumeAll+0x130>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a92:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <xTaskResumeAll+0x138>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aa2:	f7fe fbeb 	bl	800527c <vPortExitCritical>

	return xAlreadyYielded;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20004ab0 	.word	0x20004ab0
 8006ab4:	20004a88 	.word	0x20004a88
 8006ab8:	20004a48 	.word	0x20004a48
 8006abc:	20004a90 	.word	0x20004a90
 8006ac0:	200045b8 	.word	0x200045b8
 8006ac4:	200045b4 	.word	0x200045b4
 8006ac8:	20004a9c 	.word	0x20004a9c
 8006acc:	20004a98 	.word	0x20004a98
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ada:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <xTaskGetTickCount+0x1c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ae0:	687b      	ldr	r3, [r7, #4]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	20004a8c 	.word	0x20004a8c

08006af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b4f      	ldr	r3, [pc, #316]	@ (8006c3c <xTaskIncrementTick+0x148>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 8090 	bne.w	8006c28 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b08:	4b4d      	ldr	r3, [pc, #308]	@ (8006c40 <xTaskIncrementTick+0x14c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b10:	4a4b      	ldr	r2, [pc, #300]	@ (8006c40 <xTaskIncrementTick+0x14c>)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d121      	bne.n	8006b60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b1c:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	603b      	str	r3, [r7, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <xTaskIncrementTick+0x46>
 8006b3e:	4b41      	ldr	r3, [pc, #260]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	4b40      	ldr	r3, [pc, #256]	@ (8006c48 <xTaskIncrementTick+0x154>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3e      	ldr	r2, [pc, #248]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c48 <xTaskIncrementTick+0x154>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b3e      	ldr	r3, [pc, #248]	@ (8006c4c <xTaskIncrementTick+0x158>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a3c      	ldr	r2, [pc, #240]	@ (8006c4c <xTaskIncrementTick+0x158>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	f000 fae2 	bl	8007124 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b60:	4b3b      	ldr	r3, [pc, #236]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d349      	bcc.n	8006bfe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b6a:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b74:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
					break;
 8006b7c:	e03f      	b.n	8006bfe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7e:	4b31      	ldr	r3, [pc, #196]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d203      	bcs.n	8006b9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b96:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b9c:	e02f      	b.n	8006bfe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe f9de 	bl	8004f64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe f9d5 	bl	8004f64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bbe:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <xTaskIncrementTick+0x160>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <xTaskIncrementTick+0xda>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	4a22      	ldr	r2, [pc, #136]	@ (8006c54 <xTaskIncrementTick+0x160>)
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <xTaskIncrementTick+0x164>)
 8006bdc:	441a      	add	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fe f960 	bl	8004eaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	4b1b      	ldr	r3, [pc, #108]	@ (8006c5c <xTaskIncrementTick+0x168>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3b8      	bcc.n	8006b6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bfc:	e7b5      	b.n	8006b6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bfe:	4b17      	ldr	r3, [pc, #92]	@ (8006c5c <xTaskIncrementTick+0x168>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c04:	4914      	ldr	r1, [pc, #80]	@ (8006c58 <xTaskIncrementTick+0x164>)
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d901      	bls.n	8006c1a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c1a:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <xTaskIncrementTick+0x16c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e004      	b.n	8006c32 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c28:	4b0e      	ldr	r3, [pc, #56]	@ (8006c64 <xTaskIncrementTick+0x170>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8006c64 <xTaskIncrementTick+0x170>)
 8006c30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20004ab0 	.word	0x20004ab0
 8006c40:	20004a8c 	.word	0x20004a8c
 8006c44:	20004a40 	.word	0x20004a40
 8006c48:	20004a44 	.word	0x20004a44
 8006c4c:	20004aa0 	.word	0x20004aa0
 8006c50:	20004aa8 	.word	0x20004aa8
 8006c54:	20004a90 	.word	0x20004a90
 8006c58:	200045b8 	.word	0x200045b8
 8006c5c:	200045b4 	.word	0x200045b4
 8006c60:	20004a9c 	.word	0x20004a9c
 8006c64:	20004a98 	.word	0x20004a98

08006c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8006d1c <vTaskSwitchContext+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c76:	4b2a      	ldr	r3, [pc, #168]	@ (8006d20 <vTaskSwitchContext+0xb8>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c7c:	e047      	b.n	8006d0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006c7e:	4b28      	ldr	r3, [pc, #160]	@ (8006d20 <vTaskSwitchContext+0xb8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c84:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <vTaskSwitchContext+0xbc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e011      	b.n	8006cb0 <vTaskSwitchContext+0x48>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <vTaskSwitchContext+0x42>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	607b      	str	r3, [r7, #4]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <vTaskSwitchContext+0x3e>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	491d      	ldr	r1, [pc, #116]	@ (8006d28 <vTaskSwitchContext+0xc0>)
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0e3      	beq.n	8006c8c <vTaskSwitchContext+0x24>
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4a16      	ldr	r2, [pc, #88]	@ (8006d28 <vTaskSwitchContext+0xc0>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d104      	bne.n	8006cf4 <vTaskSwitchContext+0x8c>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8006d2c <vTaskSwitchContext+0xc4>)
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <vTaskSwitchContext+0xbc>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d04:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <vTaskSwitchContext+0xc4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3354      	adds	r3, #84	@ 0x54
 8006d0a:	4a09      	ldr	r2, [pc, #36]	@ (8006d30 <vTaskSwitchContext+0xc8>)
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20004ab0 	.word	0x20004ab0
 8006d20:	20004a9c 	.word	0x20004a9c
 8006d24:	20004a90 	.word	0x20004a90
 8006d28:	200045b8 	.word	0x200045b8
 8006d2c:	200045b4 	.word	0x200045b4
 8006d30:	20000038 	.word	0x20000038

08006d34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10b      	bne.n	8006d5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <vTaskPlaceOnEventList+0x48>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fe f8c4 	bl	8004ef2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f000 fb87 	bl	8007480 <prvAddCurrentTaskToDelayedList>
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200045b4 	.word	0x200045b4

08006d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	617b      	str	r3, [r7, #20]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006daa:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3318      	adds	r3, #24
 8006db0:	4619      	mov	r1, r3
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7fe f879 	bl	8004eaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb5a 	bl	8007480 <prvAddCurrentTaskToDelayedList>
	}
 8006dcc:	bf00      	nop
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200045b4 	.word	0x200045b4

08006dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3318      	adds	r3, #24
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe f8aa 	bl	8004f64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e10:	4b1d      	ldr	r3, [pc, #116]	@ (8006e88 <xTaskRemoveFromEventList+0xb0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11d      	bne.n	8006e54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe f8a1 	bl	8004f64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e26:	4b19      	ldr	r3, [pc, #100]	@ (8006e8c <xTaskRemoveFromEventList+0xb4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d903      	bls.n	8006e36 <xTaskRemoveFromEventList+0x5e>
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	4a16      	ldr	r2, [pc, #88]	@ (8006e8c <xTaskRemoveFromEventList+0xb4>)
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a13      	ldr	r2, [pc, #76]	@ (8006e90 <xTaskRemoveFromEventList+0xb8>)
 8006e44:	441a      	add	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fe f82c 	bl	8004eaa <vListInsertEnd>
 8006e52:	e005      	b.n	8006e60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	3318      	adds	r3, #24
 8006e58:	4619      	mov	r1, r3
 8006e5a:	480e      	ldr	r0, [pc, #56]	@ (8006e94 <xTaskRemoveFromEventList+0xbc>)
 8006e5c:	f7fe f825 	bl	8004eaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e64:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <xTaskRemoveFromEventList+0xc0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d905      	bls.n	8006e7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <xTaskRemoveFromEventList+0xc4>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e001      	b.n	8006e7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e7e:	697b      	ldr	r3, [r7, #20]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20004ab0 	.word	0x20004ab0
 8006e8c:	20004a90 	.word	0x20004a90
 8006e90:	200045b8 	.word	0x200045b8
 8006e94:	20004a48 	.word	0x20004a48
 8006e98:	200045b4 	.word	0x200045b4
 8006e9c:	20004a9c 	.word	0x20004a9c

08006ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ea8:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <vTaskInternalSetTimeOutState+0x24>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <vTaskInternalSetTimeOutState+0x28>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	605a      	str	r2, [r3, #4]
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	20004aa0 	.word	0x20004aa0
 8006ec8:	20004a8c 	.word	0x20004a8c

08006ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	613b      	str	r3, [r7, #16]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60fb      	str	r3, [r7, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f12:	f7fe f981 	bl	8005218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f16:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <xTaskCheckForTimeOut+0xc0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d102      	bne.n	8006f36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	e023      	b.n	8006f7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <xTaskCheckForTimeOut+0xc4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d007      	beq.n	8006f52 <xTaskCheckForTimeOut+0x86>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d302      	bcc.n	8006f52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e015      	b.n	8006f7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d20b      	bcs.n	8006f74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff99 	bl	8006ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e004      	b.n	8006f7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f7e:	f7fe f97d 	bl	800527c <vPortExitCritical>

	return xReturn;
 8006f82:	69fb      	ldr	r3, [r7, #28]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20004a8c 	.word	0x20004a8c
 8006f90:	20004aa0 	.word	0x20004aa0

08006f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f98:	4b03      	ldr	r3, [pc, #12]	@ (8006fa8 <vTaskMissedYield+0x14>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20004a9c 	.word	0x20004a9c

08006fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fb4:	f000 f852 	bl	800705c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fb8:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <prvIdleTask+0x28>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d9f9      	bls.n	8006fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fc0:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <prvIdleTask+0x2c>)
 8006fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fd0:	e7f0      	b.n	8006fb4 <prvIdleTask+0x8>
 8006fd2:	bf00      	nop
 8006fd4:	200045b8 	.word	0x200045b8
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e00c      	b.n	8007002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4a12      	ldr	r2, [pc, #72]	@ (800703c <prvInitialiseTaskLists+0x60>)
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd ff2a 	bl	8004e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3301      	adds	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b37      	cmp	r3, #55	@ 0x37
 8007006:	d9ef      	bls.n	8006fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007008:	480d      	ldr	r0, [pc, #52]	@ (8007040 <prvInitialiseTaskLists+0x64>)
 800700a:	f7fd ff21 	bl	8004e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800700e:	480d      	ldr	r0, [pc, #52]	@ (8007044 <prvInitialiseTaskLists+0x68>)
 8007010:	f7fd ff1e 	bl	8004e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007014:	480c      	ldr	r0, [pc, #48]	@ (8007048 <prvInitialiseTaskLists+0x6c>)
 8007016:	f7fd ff1b 	bl	8004e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800701a:	480c      	ldr	r0, [pc, #48]	@ (800704c <prvInitialiseTaskLists+0x70>)
 800701c:	f7fd ff18 	bl	8004e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007020:	480b      	ldr	r0, [pc, #44]	@ (8007050 <prvInitialiseTaskLists+0x74>)
 8007022:	f7fd ff15 	bl	8004e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007026:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <prvInitialiseTaskLists+0x78>)
 8007028:	4a05      	ldr	r2, [pc, #20]	@ (8007040 <prvInitialiseTaskLists+0x64>)
 800702a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800702c:	4b0a      	ldr	r3, [pc, #40]	@ (8007058 <prvInitialiseTaskLists+0x7c>)
 800702e:	4a05      	ldr	r2, [pc, #20]	@ (8007044 <prvInitialiseTaskLists+0x68>)
 8007030:	601a      	str	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	200045b8 	.word	0x200045b8
 8007040:	20004a18 	.word	0x20004a18
 8007044:	20004a2c 	.word	0x20004a2c
 8007048:	20004a48 	.word	0x20004a48
 800704c:	20004a5c 	.word	0x20004a5c
 8007050:	20004a74 	.word	0x20004a74
 8007054:	20004a40 	.word	0x20004a40
 8007058:	20004a44 	.word	0x20004a44

0800705c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007062:	e019      	b.n	8007098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007064:	f7fe f8d8 	bl	8005218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007068:	4b10      	ldr	r3, [pc, #64]	@ (80070ac <prvCheckTasksWaitingTermination+0x50>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f7fd ff75 	bl	8004f64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800707a:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <prvCheckTasksWaitingTermination+0x54>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3b01      	subs	r3, #1
 8007080:	4a0b      	ldr	r2, [pc, #44]	@ (80070b0 <prvCheckTasksWaitingTermination+0x54>)
 8007082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007084:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3b01      	subs	r3, #1
 800708a:	4a0a      	ldr	r2, [pc, #40]	@ (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 800708c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800708e:	f7fe f8f5 	bl	800527c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f810 	bl	80070b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007098:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e1      	bne.n	8007064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20004a5c 	.word	0x20004a5c
 80070b0:	20004a88 	.word	0x20004a88
 80070b4:	20004a70 	.word	0x20004a70

080070b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3354      	adds	r3, #84	@ 0x54
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fd91 	bl	8007bec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd fd99 	bl	8004c10 <vPortFree>
				vPortFree( pxTCB );
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fd fd96 	bl	8004c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070e4:	e019      	b.n	800711a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d103      	bne.n	80070f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fd fd8d 	bl	8004c10 <vPortFree>
	}
 80070f6:	e010      	b.n	800711a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d00b      	beq.n	800711a <prvDeleteTCB+0x62>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60fb      	str	r3, [r7, #12]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <prvDeleteTCB+0x5e>
	}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800712a:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <prvResetNextTaskUnblockTime+0x38>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007134:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <prvResetNextTaskUnblockTime+0x3c>)
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800713c:	e008      	b.n	8007150 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713e:	4b07      	ldr	r3, [pc, #28]	@ (800715c <prvResetNextTaskUnblockTime+0x38>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a04      	ldr	r2, [pc, #16]	@ (8007160 <prvResetNextTaskUnblockTime+0x3c>)
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20004a40 	.word	0x20004a40
 8007160:	20004aa8 	.word	0x20004aa8

08007164 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800716a:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <xTaskGetSchedulerState+0x34>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007172:	2301      	movs	r3, #1
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	e008      	b.n	800718a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007178:	4b08      	ldr	r3, [pc, #32]	@ (800719c <xTaskGetSchedulerState+0x38>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007180:	2302      	movs	r3, #2
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e001      	b.n	800718a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007186:	2300      	movs	r3, #0
 8007188:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800718a:	687b      	ldr	r3, [r7, #4]
	}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20004a94 	.word	0x20004a94
 800719c:	20004ab0 	.word	0x20004ab0

080071a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d051      	beq.n	800725a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007264 <xTaskPriorityInherit+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d241      	bcs.n	8007248 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db06      	blt.n	80071da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071cc:	4b25      	ldr	r3, [pc, #148]	@ (8007264 <xTaskPriorityInherit+0xc4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6959      	ldr	r1, [r3, #20]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007268 <xTaskPriorityInherit+0xc8>)
 80071ec:	4413      	add	r3, r2
 80071ee:	4299      	cmp	r1, r3
 80071f0:	d122      	bne.n	8007238 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd feb4 	bl	8004f64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071fc:	4b19      	ldr	r3, [pc, #100]	@ (8007264 <xTaskPriorityInherit+0xc4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4b18      	ldr	r3, [pc, #96]	@ (800726c <xTaskPriorityInherit+0xcc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d903      	bls.n	800721a <xTaskPriorityInherit+0x7a>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	4a15      	ldr	r2, [pc, #84]	@ (800726c <xTaskPriorityInherit+0xcc>)
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a10      	ldr	r2, [pc, #64]	@ (8007268 <xTaskPriorityInherit+0xc8>)
 8007228:	441a      	add	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	3304      	adds	r3, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7fd fe3a 	bl	8004eaa <vListInsertEnd>
 8007236:	e004      	b.n	8007242 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007238:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <xTaskPriorityInherit+0xc4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e008      	b.n	800725a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800724c:	4b05      	ldr	r3, [pc, #20]	@ (8007264 <xTaskPriorityInherit+0xc4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	429a      	cmp	r2, r3
 8007254:	d201      	bcs.n	800725a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800725a:	68fb      	ldr	r3, [r7, #12]
	}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200045b4 	.word	0x200045b4
 8007268:	200045b8 	.word	0x200045b8
 800726c:	20004a90 	.word	0x20004a90

08007270 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d058      	beq.n	8007338 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007286:	4b2f      	ldr	r3, [pc, #188]	@ (8007344 <xTaskPriorityDisinherit+0xd4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d00b      	beq.n	80072a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
}
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	60bb      	str	r3, [r7, #8]
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	1e5a      	subs	r2, r3, #1
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072da:	429a      	cmp	r2, r3
 80072dc:	d02c      	beq.n	8007338 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d128      	bne.n	8007338 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd fe3a 	bl	8004f64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007308:	4b0f      	ldr	r3, [pc, #60]	@ (8007348 <xTaskPriorityDisinherit+0xd8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d903      	bls.n	8007318 <xTaskPriorityDisinherit+0xa8>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <xTaskPriorityDisinherit+0xd8>)
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4a09      	ldr	r2, [pc, #36]	@ (800734c <xTaskPriorityDisinherit+0xdc>)
 8007326:	441a      	add	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f7fd fdbb 	bl	8004eaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007338:	697b      	ldr	r3, [r7, #20]
	}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200045b4 	.word	0x200045b4
 8007348:	20004a90 	.word	0x20004a90
 800734c:	200045b8 	.word	0x200045b8

08007350 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800735e:	2301      	movs	r3, #1
 8007360:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d06c      	beq.n	8007442 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d902      	bls.n	8007398 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	e002      	b.n	800739e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d04c      	beq.n	8007442 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d147      	bne.n	8007442 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80073b2:	4b26      	ldr	r3, [pc, #152]	@ (800744c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d10b      	bne.n	80073d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60bb      	str	r3, [r7, #8]
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	e7fd      	b.n	80073d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	db04      	blt.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	6959      	ldr	r1, [r3, #20]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a13      	ldr	r2, [pc, #76]	@ (8007450 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007402:	4413      	add	r3, r2
 8007404:	4299      	cmp	r1, r3
 8007406:	d11c      	bne.n	8007442 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	3304      	adds	r3, #4
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd fda9 	bl	8004f64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007416:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d903      	bls.n	8007426 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	4a0c      	ldr	r2, [pc, #48]	@ (8007454 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4a07      	ldr	r2, [pc, #28]	@ (8007450 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007434:	441a      	add	r2, r3
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	3304      	adds	r3, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f7fd fd34 	bl	8004eaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007442:	bf00      	nop
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	200045b4 	.word	0x200045b4
 8007450:	200045b8 	.word	0x200045b8
 8007454:	20004a90 	.word	0x20004a90

08007458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <pvTaskIncrementMutexHeldCount+0x24>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <pvTaskIncrementMutexHeldCount+0x24>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800746a:	3201      	adds	r2, #1
 800746c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800746e:	4b03      	ldr	r3, [pc, #12]	@ (800747c <pvTaskIncrementMutexHeldCount+0x24>)
 8007470:	681b      	ldr	r3, [r3, #0]
	}
 8007472:	4618      	mov	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	200045b4 	.word	0x200045b4

08007480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800748a:	4b21      	ldr	r3, [pc, #132]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x90>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007490:	4b20      	ldr	r3, [pc, #128]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3304      	adds	r3, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7fd fd64 	bl	8004f64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d10a      	bne.n	80074ba <prvAddCurrentTaskToDelayedList+0x3a>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4819      	ldr	r0, [pc, #100]	@ (8007518 <prvAddCurrentTaskToDelayedList+0x98>)
 80074b4:	f7fd fcf9 	bl	8004eaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074b8:	e026      	b.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d209      	bcs.n	80074e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d2:	4b12      	ldr	r3, [pc, #72]	@ (800751c <prvAddCurrentTaskToDelayedList+0x9c>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fd fd07 	bl	8004ef2 <vListInsert>
}
 80074e4:	e010      	b.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fd fcfd 	bl	8004ef2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d202      	bcs.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007502:	4a08      	ldr	r2, [pc, #32]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6013      	str	r3, [r2, #0]
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20004a8c 	.word	0x20004a8c
 8007514:	200045b4 	.word	0x200045b4
 8007518:	20004a74 	.word	0x20004a74
 800751c:	20004a44 	.word	0x20004a44
 8007520:	20004a40 	.word	0x20004a40
 8007524:	20004aa8 	.word	0x20004aa8

08007528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	@ 0x28
 800752c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007532:	f000 fb13 	bl	8007b5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007536:	4b1d      	ldr	r3, [pc, #116]	@ (80075ac <xTimerCreateTimerTask+0x84>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d021      	beq.n	8007582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007546:	1d3a      	adds	r2, r7, #4
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	f107 030c 	add.w	r3, r7, #12
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd fa75 	bl	8004a40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	9202      	str	r2, [sp, #8]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	2302      	movs	r3, #2
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	460a      	mov	r2, r1
 8007568:	4911      	ldr	r1, [pc, #68]	@ (80075b0 <xTimerCreateTimerTask+0x88>)
 800756a:	4812      	ldr	r0, [pc, #72]	@ (80075b4 <xTimerCreateTimerTask+0x8c>)
 800756c:	f7fe ffa2 	bl	80064b4 <xTaskCreateStatic>
 8007570:	4603      	mov	r3, r0
 8007572:	4a11      	ldr	r2, [pc, #68]	@ (80075b8 <xTimerCreateTimerTask+0x90>)
 8007574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007576:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <xTimerCreateTimerTask+0x90>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800757e:	2301      	movs	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	613b      	str	r3, [r7, #16]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20004ae4 	.word	0x20004ae4
 80075b0:	08007e38 	.word	0x08007e38
 80075b4:	080076f5 	.word	0x080076f5
 80075b8:	20004ae8 	.word	0x20004ae8

080075bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	@ 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <xTimerGenericCommand+0x30>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	623b      	str	r3, [r7, #32]
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	e7fd      	b.n	80075e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075ec:	4b19      	ldr	r3, [pc, #100]	@ (8007654 <xTimerGenericCommand+0x98>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02a      	beq.n	800764a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b05      	cmp	r3, #5
 8007604:	dc18      	bgt.n	8007638 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007606:	f7ff fdad 	bl	8007164 <xTaskGetSchedulerState>
 800760a:	4603      	mov	r3, r0
 800760c:	2b02      	cmp	r3, #2
 800760e:	d109      	bne.n	8007624 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007610:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <xTimerGenericCommand+0x98>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	f107 0110 	add.w	r1, r7, #16
 8007618:	2300      	movs	r3, #0
 800761a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800761c:	f7fe f8d2 	bl	80057c4 <xQueueGenericSend>
 8007620:	6278      	str	r0, [r7, #36]	@ 0x24
 8007622:	e012      	b.n	800764a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <xTimerGenericCommand+0x98>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	f107 0110 	add.w	r1, r7, #16
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	f7fe f8c8 	bl	80057c4 <xQueueGenericSend>
 8007634:	6278      	str	r0, [r7, #36]	@ 0x24
 8007636:	e008      	b.n	800764a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007638:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <xTimerGenericCommand+0x98>)
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	f107 0110 	add.w	r1, r7, #16
 8007640:	2300      	movs	r3, #0
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	f7fe f9c0 	bl	80059c8 <xQueueGenericSendFromISR>
 8007648:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	@ 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20004ae4 	.word	0x20004ae4

08007658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b23      	ldr	r3, [pc, #140]	@ (80076f0 <prvProcessExpiredTimer+0x98>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fd fc77 	bl	8004f64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d023      	beq.n	80076cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	18d1      	adds	r1, r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	f000 f8d5 	bl	8007840 <prvInsertTimerInActiveList>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800769c:	2300      	movs	r3, #0
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	2100      	movs	r1, #0
 80076a6:	6978      	ldr	r0, [r7, #20]
 80076a8:	f7ff ff88 	bl	80075bc <xTimerGenericCommand>
 80076ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d114      	bne.n	80076de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	6978      	ldr	r0, [r7, #20]
 80076e4:	4798      	blx	r3
}
 80076e6:	bf00      	nop
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20004adc 	.word	0x20004adc

080076f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076fc:	f107 0308 	add.w	r3, r7, #8
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f859 	bl	80077b8 <prvGetNextExpireTime>
 8007706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4619      	mov	r1, r3
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f805 	bl	800771c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007712:	f000 f8d7 	bl	80078c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007716:	bf00      	nop
 8007718:	e7f0      	b.n	80076fc <prvTimerTask+0x8>
	...

0800771c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007726:	f7ff f929 	bl	800697c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800772a:	f107 0308 	add.w	r3, r7, #8
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f866 	bl	8007800 <prvSampleTimeNow>
 8007734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d130      	bne.n	800779e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <prvProcessTimerOrBlockTask+0x3c>
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	429a      	cmp	r2, r3
 8007748:	d806      	bhi.n	8007758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800774a:	f7ff f925 	bl	8006998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ff81 	bl	8007658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007756:	e024      	b.n	80077a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800775e:	4b13      	ldr	r3, [pc, #76]	@ (80077ac <prvProcessTimerOrBlockTask+0x90>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <prvProcessTimerOrBlockTask+0x50>
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <prvProcessTimerOrBlockTask+0x52>
 800776c:	2300      	movs	r3, #0
 800776e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007770:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <prvProcessTimerOrBlockTask+0x94>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4619      	mov	r1, r3
 800777e:	f7fe fe65 	bl	800644c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007782:	f7ff f909 	bl	8006998 <xTaskResumeAll>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800778c:	4b09      	ldr	r3, [pc, #36]	@ (80077b4 <prvProcessTimerOrBlockTask+0x98>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
}
 800779c:	e001      	b.n	80077a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800779e:	f7ff f8fb 	bl	8006998 <xTaskResumeAll>
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20004ae0 	.word	0x20004ae0
 80077b0:	20004ae4 	.word	0x20004ae4
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <prvGetNextExpireTime+0x44>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <prvGetNextExpireTime+0x16>
 80077ca:	2201      	movs	r2, #1
 80077cc:	e000      	b.n	80077d0 <prvGetNextExpireTime+0x18>
 80077ce:	2200      	movs	r2, #0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d105      	bne.n	80077e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077dc:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <prvGetNextExpireTime+0x44>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	e001      	b.n	80077ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077ec:	68fb      	ldr	r3, [r7, #12]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20004adc 	.word	0x20004adc

08007800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007808:	f7ff f964 	bl	8006ad4 <xTaskGetTickCount>
 800780c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <prvSampleTimeNow+0x3c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d205      	bcs.n	8007824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007818:	f000 f93a 	bl	8007a90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	e002      	b.n	800782a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800782a:	4a04      	ldr	r2, [pc, #16]	@ (800783c <prvSampleTimeNow+0x3c>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20004aec 	.word	0x20004aec

08007840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	429a      	cmp	r2, r3
 8007864:	d812      	bhi.n	800788c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	429a      	cmp	r2, r3
 8007872:	d302      	bcc.n	800787a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e01b      	b.n	80078b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800787a:	4b10      	ldr	r3, [pc, #64]	@ (80078bc <prvInsertTimerInActiveList+0x7c>)
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fd fb34 	bl	8004ef2 <vListInsert>
 800788a:	e012      	b.n	80078b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d206      	bcs.n	80078a2 <prvInsertTimerInActiveList+0x62>
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d302      	bcc.n	80078a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e007      	b.n	80078b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078a2:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <prvInsertTimerInActiveList+0x80>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fd fb20 	bl	8004ef2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078b2:	697b      	ldr	r3, [r7, #20]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20004ae0 	.word	0x20004ae0
 80078c0:	20004adc 	.word	0x20004adc

080078c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08e      	sub	sp, #56	@ 0x38
 80078c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ca:	e0ce      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da19      	bge.n	8007906 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078d2:	1d3b      	adds	r3, r7, #4
 80078d4:	3304      	adds	r3, #4
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10b      	bne.n	80078f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	61fb      	str	r3, [r7, #28]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078fc:	6850      	ldr	r0, [r2, #4]
 80078fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007900:	6892      	ldr	r2, [r2, #8]
 8007902:	4611      	mov	r1, r2
 8007904:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f2c0 80ae 	blt.w	8007a6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	3304      	adds	r3, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd fb20 	bl	8004f64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007924:	463b      	mov	r3, r7
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff ff6a 	bl	8007800 <prvSampleTimeNow>
 800792c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b09      	cmp	r3, #9
 8007932:	f200 8097 	bhi.w	8007a64 <prvProcessReceivedCommands+0x1a0>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <prvProcessReceivedCommands+0x78>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007965 	.word	0x08007965
 8007940:	08007965 	.word	0x08007965
 8007944:	08007965 	.word	0x08007965
 8007948:	080079db 	.word	0x080079db
 800794c:	080079ef 	.word	0x080079ef
 8007950:	08007a3b 	.word	0x08007a3b
 8007954:	08007965 	.word	0x08007965
 8007958:	08007965 	.word	0x08007965
 800795c:	080079db 	.word	0x080079db
 8007960:	080079ef 	.word	0x080079ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	18d1      	adds	r1, r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007984:	f7ff ff5c 	bl	8007840 <prvInsertTimerInActiveList>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d06c      	beq.n	8007a68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800798e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d061      	beq.n	8007a68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	441a      	add	r2, r3
 80079ac:	2300      	movs	r3, #0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	2100      	movs	r1, #0
 80079b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b6:	f7ff fe01 	bl	80075bc <xTimerGenericCommand>
 80079ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d152      	bne.n	8007a68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	61bb      	str	r3, [r7, #24]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079ec:	e03d      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10b      	bne.n	8007a26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	617b      	str	r3, [r7, #20]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	18d1      	adds	r1, r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a34:	f7ff ff04 	bl	8007840 <prvInsertTimerInActiveList>
					break;
 8007a38:	e017      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a4a:	f7fd f8e1 	bl	8004c10 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a4e:	e00c      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a62:	e002      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <prvProcessReceivedCommands+0x1a6>
					break;
 8007a68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a6a:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <prvProcessReceivedCommands+0x1c8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	1d39      	adds	r1, r7, #4
 8007a70:	2200      	movs	r2, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe f8d6 	bl	8005c24 <xQueueReceive>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f47f af26 	bne.w	80078cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	3730      	adds	r7, #48	@ 0x30
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20004ae4 	.word	0x20004ae4

08007a90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a96:	e049      	b.n	8007b2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a98:	4b2e      	ldr	r3, [pc, #184]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd fa57 	bl	8004f64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02f      	beq.n	8007b2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d90e      	bls.n	8007afc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aea:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fd f9fc 	bl	8004ef2 <vListInsert>
 8007afa:	e017      	b.n	8007b2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	2100      	movs	r1, #0
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fd58 	bl	80075bc <xTimerGenericCommand>
 8007b0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	603b      	str	r3, [r7, #0]
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b2c:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1b0      	bne.n	8007a98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b36:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <prvSwitchTimerLists+0xc8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a04      	ldr	r2, [pc, #16]	@ (8007b54 <prvSwitchTimerLists+0xc4>)
 8007b42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b44:	4a04      	ldr	r2, [pc, #16]	@ (8007b58 <prvSwitchTimerLists+0xc8>)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6013      	str	r3, [r2, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20004adc 	.word	0x20004adc
 8007b58:	20004ae0 	.word	0x20004ae0

08007b5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b62:	f7fd fb59 	bl	8005218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b66:	4b15      	ldr	r3, [pc, #84]	@ (8007bbc <prvCheckForValidListAndQueue+0x60>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d120      	bne.n	8007bb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b6e:	4814      	ldr	r0, [pc, #80]	@ (8007bc0 <prvCheckForValidListAndQueue+0x64>)
 8007b70:	f7fd f96e 	bl	8004e50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b74:	4813      	ldr	r0, [pc, #76]	@ (8007bc4 <prvCheckForValidListAndQueue+0x68>)
 8007b76:	f7fd f96b 	bl	8004e50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <prvCheckForValidListAndQueue+0x6c>)
 8007b7c:	4a10      	ldr	r2, [pc, #64]	@ (8007bc0 <prvCheckForValidListAndQueue+0x64>)
 8007b7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b80:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <prvCheckForValidListAndQueue+0x70>)
 8007b82:	4a10      	ldr	r2, [pc, #64]	@ (8007bc4 <prvCheckForValidListAndQueue+0x68>)
 8007b84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b86:	2300      	movs	r3, #0
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <prvCheckForValidListAndQueue+0x74>)
 8007b8c:	4a11      	ldr	r2, [pc, #68]	@ (8007bd4 <prvCheckForValidListAndQueue+0x78>)
 8007b8e:	2110      	movs	r1, #16
 8007b90:	200a      	movs	r0, #10
 8007b92:	f7fd fccd 	bl	8005530 <xQueueGenericCreateStatic>
 8007b96:	4603      	mov	r3, r0
 8007b98:	4a08      	ldr	r2, [pc, #32]	@ (8007bbc <prvCheckForValidListAndQueue+0x60>)
 8007b9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <prvCheckForValidListAndQueue+0x60>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ba4:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <prvCheckForValidListAndQueue+0x60>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	490b      	ldr	r1, [pc, #44]	@ (8007bd8 <prvCheckForValidListAndQueue+0x7c>)
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fbfa 	bl	80063a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bb0:	f7fd fb64 	bl	800527c <vPortExitCritical>
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20004ae4 	.word	0x20004ae4
 8007bc0:	20004ab4 	.word	0x20004ab4
 8007bc4:	20004ac8 	.word	0x20004ac8
 8007bc8:	20004adc 	.word	0x20004adc
 8007bcc:	20004ae0 	.word	0x20004ae0
 8007bd0:	20004b90 	.word	0x20004b90
 8007bd4:	20004af0 	.word	0x20004af0
 8007bd8:	08007e40 	.word	0x08007e40

08007bdc <memset>:
 8007bdc:	4402      	add	r2, r0
 8007bde:	4603      	mov	r3, r0
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d100      	bne.n	8007be6 <memset+0xa>
 8007be4:	4770      	bx	lr
 8007be6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bea:	e7f9      	b.n	8007be0 <memset+0x4>

08007bec <_reclaim_reent>:
 8007bec:	4b29      	ldr	r3, [pc, #164]	@ (8007c94 <_reclaim_reent+0xa8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4283      	cmp	r3, r0
 8007bf2:	b570      	push	{r4, r5, r6, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	d04b      	beq.n	8007c90 <_reclaim_reent+0xa4>
 8007bf8:	69c3      	ldr	r3, [r0, #28]
 8007bfa:	b1ab      	cbz	r3, 8007c28 <_reclaim_reent+0x3c>
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	b16b      	cbz	r3, 8007c1c <_reclaim_reent+0x30>
 8007c00:	2500      	movs	r5, #0
 8007c02:	69e3      	ldr	r3, [r4, #28]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	5959      	ldr	r1, [r3, r5]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d13b      	bne.n	8007c84 <_reclaim_reent+0x98>
 8007c0c:	3504      	adds	r5, #4
 8007c0e:	2d80      	cmp	r5, #128	@ 0x80
 8007c10:	d1f7      	bne.n	8007c02 <_reclaim_reent+0x16>
 8007c12:	69e3      	ldr	r3, [r4, #28]
 8007c14:	4620      	mov	r0, r4
 8007c16:	68d9      	ldr	r1, [r3, #12]
 8007c18:	f000 f872 	bl	8007d00 <_free_r>
 8007c1c:	69e3      	ldr	r3, [r4, #28]
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	b111      	cbz	r1, 8007c28 <_reclaim_reent+0x3c>
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f86c 	bl	8007d00 <_free_r>
 8007c28:	6961      	ldr	r1, [r4, #20]
 8007c2a:	b111      	cbz	r1, 8007c32 <_reclaim_reent+0x46>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 f867 	bl	8007d00 <_free_r>
 8007c32:	69e1      	ldr	r1, [r4, #28]
 8007c34:	b111      	cbz	r1, 8007c3c <_reclaim_reent+0x50>
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f862 	bl	8007d00 <_free_r>
 8007c3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c3e:	b111      	cbz	r1, 8007c46 <_reclaim_reent+0x5a>
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 f85d 	bl	8007d00 <_free_r>
 8007c46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c48:	b111      	cbz	r1, 8007c50 <_reclaim_reent+0x64>
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 f858 	bl	8007d00 <_free_r>
 8007c50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c52:	b111      	cbz	r1, 8007c5a <_reclaim_reent+0x6e>
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 f853 	bl	8007d00 <_free_r>
 8007c5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c5c:	b111      	cbz	r1, 8007c64 <_reclaim_reent+0x78>
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 f84e 	bl	8007d00 <_free_r>
 8007c64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c66:	b111      	cbz	r1, 8007c6e <_reclaim_reent+0x82>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 f849 	bl	8007d00 <_free_r>
 8007c6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c70:	b111      	cbz	r1, 8007c78 <_reclaim_reent+0x8c>
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 f844 	bl	8007d00 <_free_r>
 8007c78:	6a23      	ldr	r3, [r4, #32]
 8007c7a:	b14b      	cbz	r3, 8007c90 <_reclaim_reent+0xa4>
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c82:	4718      	bx	r3
 8007c84:	680e      	ldr	r6, [r1, #0]
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f83a 	bl	8007d00 <_free_r>
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	e7bb      	b.n	8007c08 <_reclaim_reent+0x1c>
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
 8007c92:	bf00      	nop
 8007c94:	20000038 	.word	0x20000038

08007c98 <__libc_init_array>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd0 <__libc_init_array+0x38>)
 8007c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd4 <__libc_init_array+0x3c>)
 8007c9e:	1b64      	subs	r4, r4, r5
 8007ca0:	10a4      	asrs	r4, r4, #2
 8007ca2:	2600      	movs	r6, #0
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	d109      	bne.n	8007cbc <__libc_init_array+0x24>
 8007ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd8 <__libc_init_array+0x40>)
 8007caa:	4c0c      	ldr	r4, [pc, #48]	@ (8007cdc <__libc_init_array+0x44>)
 8007cac:	f000 f87e 	bl	8007dac <_init>
 8007cb0:	1b64      	subs	r4, r4, r5
 8007cb2:	10a4      	asrs	r4, r4, #2
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	42a6      	cmp	r6, r4
 8007cb8:	d105      	bne.n	8007cc6 <__libc_init_array+0x2e>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc0:	4798      	blx	r3
 8007cc2:	3601      	adds	r6, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__libc_init_array+0xc>
 8007cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cca:	4798      	blx	r3
 8007ccc:	3601      	adds	r6, #1
 8007cce:	e7f2      	b.n	8007cb6 <__libc_init_array+0x1e>
 8007cd0:	08007f54 	.word	0x08007f54
 8007cd4:	08007f54 	.word	0x08007f54
 8007cd8:	08007f54 	.word	0x08007f54
 8007cdc:	08007f58 	.word	0x08007f58

08007ce0 <__retarget_lock_acquire_recursive>:
 8007ce0:	4770      	bx	lr

08007ce2 <__retarget_lock_release_recursive>:
 8007ce2:	4770      	bx	lr

08007ce4 <memcpy>:
 8007ce4:	440a      	add	r2, r1
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cec:	d100      	bne.n	8007cf0 <memcpy+0xc>
 8007cee:	4770      	bx	lr
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	d1f9      	bne.n	8007cf2 <memcpy+0xe>
 8007cfe:	bd10      	pop	{r4, pc}

08007d00 <_free_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4605      	mov	r5, r0
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d041      	beq.n	8007d8c <_free_r+0x8c>
 8007d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0c:	1f0c      	subs	r4, r1, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfb8      	it	lt
 8007d12:	18e4      	addlt	r4, r4, r3
 8007d14:	f000 f83e 	bl	8007d94 <__malloc_lock>
 8007d18:	4a1d      	ldr	r2, [pc, #116]	@ (8007d90 <_free_r+0x90>)
 8007d1a:	6813      	ldr	r3, [r2, #0]
 8007d1c:	b933      	cbnz	r3, 8007d2c <_free_r+0x2c>
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	6014      	str	r4, [r2, #0]
 8007d22:	4628      	mov	r0, r5
 8007d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d28:	f000 b83a 	b.w	8007da0 <__malloc_unlock>
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d908      	bls.n	8007d42 <_free_r+0x42>
 8007d30:	6820      	ldr	r0, [r4, #0]
 8007d32:	1821      	adds	r1, r4, r0
 8007d34:	428b      	cmp	r3, r1
 8007d36:	bf01      	itttt	eq
 8007d38:	6819      	ldreq	r1, [r3, #0]
 8007d3a:	685b      	ldreq	r3, [r3, #4]
 8007d3c:	1809      	addeq	r1, r1, r0
 8007d3e:	6021      	streq	r1, [r4, #0]
 8007d40:	e7ed      	b.n	8007d1e <_free_r+0x1e>
 8007d42:	461a      	mov	r2, r3
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b10b      	cbz	r3, 8007d4c <_free_r+0x4c>
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d9fa      	bls.n	8007d42 <_free_r+0x42>
 8007d4c:	6811      	ldr	r1, [r2, #0]
 8007d4e:	1850      	adds	r0, r2, r1
 8007d50:	42a0      	cmp	r0, r4
 8007d52:	d10b      	bne.n	8007d6c <_free_r+0x6c>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	4401      	add	r1, r0
 8007d58:	1850      	adds	r0, r2, r1
 8007d5a:	4283      	cmp	r3, r0
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	d1e0      	bne.n	8007d22 <_free_r+0x22>
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	6053      	str	r3, [r2, #4]
 8007d66:	4408      	add	r0, r1
 8007d68:	6010      	str	r0, [r2, #0]
 8007d6a:	e7da      	b.n	8007d22 <_free_r+0x22>
 8007d6c:	d902      	bls.n	8007d74 <_free_r+0x74>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	e7d6      	b.n	8007d22 <_free_r+0x22>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	1821      	adds	r1, r4, r0
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf04      	itt	eq
 8007d7c:	6819      	ldreq	r1, [r3, #0]
 8007d7e:	685b      	ldreq	r3, [r3, #4]
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	bf04      	itt	eq
 8007d84:	1809      	addeq	r1, r1, r0
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	6054      	str	r4, [r2, #4]
 8007d8a:	e7ca      	b.n	8007d22 <_free_r+0x22>
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	bf00      	nop
 8007d90:	20004d1c 	.word	0x20004d1c

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	@ (8007d9c <__malloc_lock+0x8>)
 8007d96:	f7ff bfa3 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20004d18 	.word	0x20004d18

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	@ (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f7ff bf9e 	b.w	8007ce2 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	20004d18 	.word	0x20004d18

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
